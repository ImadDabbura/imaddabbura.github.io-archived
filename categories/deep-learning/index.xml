<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deep Learning | Imad Dabbura</title>
    <link>https://imaddabbura.github.io/categories/deep-learning/</link>
      <atom:link href="https://imaddabbura.github.io/categories/deep-learning/index.xml" rel="self" type="application/rss+xml" />
    <description>Deep Learning</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Imad Dabbura 2018</copyright><lastBuildDate>Sun, 20 May 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://imaddabbura.github.io/img/icon-192.png</url>
      <title>Deep Learning</title>
      <link>https://imaddabbura.github.io/categories/deep-learning/</link>
    </image>
    
    <item>
      <title>Coding Neural Network - Dropout</title>
      <link>https://imaddabbura.github.io/post/coding-nn-dropout/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      <guid>https://imaddabbura.github.io/post/coding-nn-dropout/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Dropout&lt;/strong&gt; is a regularization technique. On each iteration, we randomly shut down some neurons (units) on each layer and don&#39;t use those neurons in both forward propagation and back-propagation. Since the units that will be dropped out on each iteration will be random, the learning algorithm will have no idea which neurons will be shut down on every iteration; therefore, force the learning algorithm to spread out the weights and not focus on some specific feattures (units).
Moreover, dropout help improving generalization error by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since we drop some units on each iteration, this will lead to smaller network which in turns means simpler network (regularization).&lt;/li&gt;
&lt;li&gt;Can be seen as an approximation to bagging techniques. Each iteration can be viewed as different model since we&#39;re dropping randomly different units on each layer. This means that the error would be the average of errors from all different models (iterations). Therefore, averaging errors from different models especially if those errors are uncorrelated would reduce the overall errors. In the worst case where errors are perfectly correlated, averaging among all models won&#39;t help at all; however, we know that in practice errors have some degree of uncorrelation. As result, it will always improve generalization error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use different probabilities on each layer; however, the output layer would always have &lt;code&gt;keep_prob = 1&lt;/code&gt; and the input layer has high &lt;code&gt;keep_prob&lt;/code&gt; such as 0.9 or 1. If a hidden layer has &lt;code&gt;keep_prob = 0.8&lt;/code&gt;, this means that; on each iteration, each unit has 80% probablitity of being included and 20% probability of being dropped out.&lt;/p&gt;

&lt;p&gt;Dropout is used a lot in computer vision problems because we have a lot of features and not a lot of data. Also, features (pixels) next to each other usually don&#39;t add a lot of information. Therefore, models always suffer from overfitting.&lt;/p&gt;

&lt;p&gt;To illustrate how dropout helps us reduce generalization error, we&#39;ll use the same dataset we&#39;ve used in the previous posts. The dataset has images for cats and non-cat. We&#39;ll try to build a neural network to classify if the image has cat or not. Each image is 64 x 64 pixels on RGB scale. Let&#39;s import the data and take a look at the shape as well as a sample of a cat image from the training set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Loading packages
import os

import h5py
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# local modules
os.chdir(&amp;quot;../scripts/&amp;quot;)
from coding_neural_network_from_scratch import (initialize_parameters,
                                                linear_activation_forward,
                                                compute_cost,
                                                linear_activation_backward,
                                                update_parameters,
                                                accuracy)

%matplotlib inline
sns.set_context(&amp;quot;notebook&amp;quot;)
plt.style.use(&amp;quot;fivethirtyeight&amp;quot;)
plt.rcParams[&#39;figure.figsize&#39;] = (12, 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import training data
train_dataset = h5py.File(&amp;quot;../data/train_catvnoncat.h5&amp;quot;)
X_train = np.array(train_dataset[&amp;quot;train_set_x&amp;quot;])
Y_train = np.array(train_dataset[&amp;quot;train_set_y&amp;quot;])

# Plot a sample image
plt.imshow(X_train[50])
plt.axis(&amp;quot;off&amp;quot;);

# Import test data
test_dataset = h5py.File(&amp;quot;../data/test_catvnoncat.h5&amp;quot;)
X_test = np.array(test_dataset[&amp;quot;test_set_x&amp;quot;])
Y_test = np.array(test_dataset[&amp;quot;test_set_y&amp;quot;])

# Transform data
X_train = X_train.reshape(209, -1).T
X_train = X_train / 255
Y_train = Y_train.reshape(-1, 209)

X_test = X_test.reshape(50, -1).T
X_test = X_test / 255
Y_test = Y_test.reshape(-1, 50)

# print the new shape of both training and test datasets
print(&amp;quot;Training data dimensions:&amp;quot;)
print(&amp;quot;X&#39;s dimension: {}, Y&#39;s dimension: {}&amp;quot;.format(X_train.shape, Y_train.shape))
print(&amp;quot;Test data dimensions:&amp;quot;)
print(&amp;quot;X&#39;s dimension: {}, Y&#39;s dimension: {}&amp;quot;.format(X_test.shape, Y_test.shape))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Training data dimensions:
X&#39;s dimension: (12288, 209), Y&#39;s dimension: (1, 209)
Test data dimensions:
X&#39;s dimension: (12288, 50), Y&#39;s dimension: (1, 50)
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/cat_sample.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/cat_sample.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Sample image.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Now, we&#39;ll write the functions needed to apply dropout on both forward propagation and back-propagation. Note that we&#39;ll utilize the functions we wrote in previous posts such as &lt;code&gt;initialize_parameters&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def drop_out_matrices(layers_dims, m, keep_prob):
    np.random.seed(1)
    D = {}
    L = len(layers_dims)

    for l in range(L):
        # initialize the random values for the dropout matrix
        D[str(l)] = np.random.rand(layers_dims[l], m)
        # Convert it to 0/1 to shut down neurons corresponding to each element
        D[str(l)] = D[str(l)] &amp;lt; keep_prob[l]
        assert(D[str(l)].shape == (layers_dims[l], m))
    return D


def L_model_forward(
        X, parameters, D, keep_prob, hidden_layers_activation_fn=&amp;quot;relu&amp;quot;):
    A = X                           # since input matrix A0
    A = np.multiply(A, D[str(0)])
    A /= keep_prob[0]
    caches = []                     # initialize the caches list
    L = len(parameters) // 2        # number of layer in the network

    for l in range(1, L):
        A_prev = A
        A, cache = linear_activation_forward(
            A_prev, parameters[&amp;quot;W&amp;quot; + str(l)], parameters[&amp;quot;b&amp;quot; + str(l)],
            hidden_layers_activation_fn)
        # shut down some units
        A = np.multiply(A, D[str(l)])
        # scale that value of units to keep expected value the same
        A /= keep_prob[l]
        caches.append(cache)

    AL, cache = linear_activation_forward(
        A, parameters[&amp;quot;W&amp;quot; + str(L)], parameters[&amp;quot;b&amp;quot; + str(L)], &amp;quot;sigmoid&amp;quot;)
    AL = np.multiply(AL, D[str(L)])
    AL /= keep_prob[L]
    caches.append(cache)
    assert(AL.shape == (1, X.shape[1]))

    return AL, caches


def L_model_backward(
        AL, Y, caches, D, keep_prob, hidden_layers_activation_fn=&amp;quot;relu&amp;quot;):
    Y = Y.reshape(AL.shape)
    L = len(caches)
    grads = {}

    # dA for output layer
    dAL = np.divide(AL - Y, np.multiply(AL, 1 - AL))
    dAL = np.multiply(dAL, D[str(L)])
    dAL /= keep_prob[L]

    grads[&amp;quot;dA&amp;quot; + str(L - 1)], grads[&amp;quot;dW&amp;quot; + str(L)], grads[
        &amp;quot;db&amp;quot; + str(L)] = linear_activation_backward(
            dAL, caches[L - 1], &amp;quot;sigmoid&amp;quot;)
    grads[&amp;quot;dA&amp;quot; + str(L - 1)] = np.multiply(
        grads[&amp;quot;dA&amp;quot; + str(L - 1)], D[str(L - 1)])
    grads[&amp;quot;dA&amp;quot; + str(L - 1)] /= keep_prob[L - 1]

    for l in range(L - 1, 0, -1):
        current_cache = caches[l - 1]
        grads[&amp;quot;dA&amp;quot; + str(l - 1)], grads[&amp;quot;dW&amp;quot; + str(l)], grads[
            &amp;quot;db&amp;quot; + str(l)] = linear_activation_backward(
                grads[&amp;quot;dA&amp;quot; + str(l)], current_cache,
                hidden_layers_activation_fn)

        grads[&amp;quot;dA&amp;quot; + str(l - 1)] = np.multiply(
            grads[&amp;quot;dA&amp;quot; + str(l - 1)], D[str(l - 1)])
        grads[&amp;quot;dA&amp;quot; + str(l - 1)] /= keep_prob[l - 1]

    return grads


def model_with_dropout(
        X, Y, layers_dims, keep_prob, learning_rate=0.01, num_iterations=3000,
        print_cost=True, hidden_layers_activation_fn=&amp;quot;relu&amp;quot;):
    # get number of examples
    m = X.shape[1]

    # to get consistents output
    np.random.seed(1)

    # initialize parameters
    parameters = initialize_parameters(layers_dims)

    # intialize cost list
    cost_list = []

    # implement gradient descent
    for i in range(num_iterations):
        # Initialize dropout matrices
        D = drop_out_matrices(layers_dims, m, keep_prob)

        # compute forward propagation
        AL, caches = L_model_forward(
            X, parameters, D, keep_prob, hidden_layers_activation_fn)

        # compute regularized cost
        cost = compute_cost(AL, Y)

        # compute gradients
        grads = L_model_backward(
            AL, Y, caches, D, keep_prob, hidden_layers_activation_fn)

        # update parameters
        parameters = update_parameters(parameters, grads, learning_rate)

        # print cost
        if (i + 1) % 100 == 0 and print_cost:
            print(f&amp;quot;The cost after {i + 1} iterations : {cost:.4f}.&amp;quot;)
        # append cost
        if i % 100 == 0:
            cost_list.append(cost)

    # plot the cost curve
    plt.plot(cost_list)
    plt.xlabel(&amp;quot;Iteration (per hundreds)&amp;quot;)
    plt.ylabel(&amp;quot;Cost&amp;quot;)
    plt.title(f&amp;quot;Cost curve for the learning rate = {learning_rate}&amp;quot;)

    return parameters
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we&#39;re ready to build our neural network. First, we&#39;ll build one fully connected network without dropout. That is to say, &lt;code&gt;keep_prob = 1&lt;/code&gt;. Next, we&#39;ll build another network where &lt;code&gt;keep_prob &amp;lt; 1&lt;/code&gt;. Lastly, we&#39;ll compare the generalization error of both networks and see how dropout technique can help us in improving our generalization error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# setup layers dimensions, number of examples, and keep probabilities list
m = X_train.shape[0]
keep_prob = [1, 1, 1, 1]
layers_dims = [m, 10, 10, 1]

# train NN with no dropout
parameters = model_with_dropout(X_train, Y_train, layers_dims, keep_prob=keep_prob,
                                learning_rate=0.03, num_iterations=1000,
                                hidden_layers_activation_fn=&amp;quot;relu&amp;quot;)

# print the test accuracy
print(&amp;quot;The training accuracy rate: {}&amp;quot;.format(accuracy(X_train, parameters, Y_train, &amp;quot;relu&amp;quot;)[-7:]))
print(&amp;quot;The test accuracy rate: {}&amp;quot;.format(accuracy(X_test, parameters, Y_test, &amp;quot;relu&amp;quot;)[-7:]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations : 0.6555.
The cost after 200 iterations : 0.6468.
The cost after 300 iterations : 0.6447.
The cost after 400 iterations : 0.6442.
The cost after 500 iterations : 0.6440.
The cost after 600 iterations : 0.6440.
The cost after 700 iterations : 0.6440.
The cost after 800 iterations : 0.6440.
The cost after 900 iterations : 0.6440.
The cost after 1000 iterations : 0.6440.
The training accuracy rate: 65.55%.
The test accuracy rate: 34.00%.
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/no_dropout.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/no_dropout.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Cost curve with no dropout.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# setup keep probabilities list
keep_prob = [1, 0.5, 0.5, 1]

# train NN with no dropout
parameters = model_with_dropout(X_train, Y_train, layers_dims, keep_prob=keep_prob,
                                learning_rate=0.03, num_iterations=1000,
                                hidden_layers_activation_fn=&amp;quot;relu&amp;quot;)

# print the test accuracy
print(&amp;quot;The training accuracy rate: {}&amp;quot;.format(accuracy(X_train, parameters, Y_train, &amp;quot;relu&amp;quot;)[-7:]))
print(&amp;quot;The test accuracy rate: {}&amp;quot;.format(accuracy(X_test, parameters, Y_test, &amp;quot;relu&amp;quot;)[-7:]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations : 0.6555.
The cost after 200 iterations : 0.6467.
The cost after 300 iterations : 0.6445.
The cost after 400 iterations : 0.6437.
The cost after 500 iterations : 0.6412.
The cost after 600 iterations : 0.6338.
The cost after 700 iterations : 0.6108.
The cost after 800 iterations : 0.5367.
The cost after 900 iterations : 0.4322.
The cost after 1000 iterations : 0.3114.
The training accuracy rate: 74.16%.
The test accuracy rate: 44.00%.
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/dropout.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/dropout.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Cost curve with dropout.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;As the results above showed, the network with dropout improved on test accuracy rate by 30%. Note that this is just an illustrative example to show the effectiveness of the dropout technique. We chose an arbitrary probabilities in this example; however, we can tune the dropout probabilities on each layer to yield the best validation loss and accuracy.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Conclusion
&lt;/h2&gt;

&lt;p&gt;Dropout is a very effective regularization technique that is used a lot in &lt;em&gt;Convolutional Neural Networks&lt;/em&gt;. Below are some takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set &lt;code&gt;keep_prob = 1&lt;/code&gt; when using gradient checking; otherwise, it won&#39;t work.&lt;/li&gt;
&lt;li&gt;Dropout is used only during training. Don&#39;t use it when testing/predicting new examples.&lt;/li&gt;
&lt;li&gt;The lowest the &lt;code&gt;keep_prob&lt;/code&gt; $\rightarrow$ the simpler the neural network. As &lt;code&gt;keep_prob&lt;/code&gt; decreases, the bias increases and the variance decreases. Therefore, layers with more neurons are expected to have lower &lt;code&gt;keep_prob&lt;/code&gt; to avoid overfitting.&lt;/li&gt;
&lt;li&gt;It&#39;s computationally a cheap way to improve generalization error and help resolve overfitting.&lt;/li&gt;
&lt;li&gt;One can tune &lt;code&gt;keep_prob&lt;/code&gt; to get the best results out of the task at hand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code that created this post can be found &lt;a href=&#34;https://github.com/ImadDabbura/blog-posts/blob/master/notebooks/Coding-Neural-Network-Dropout.ipynb&#34;&gt;here&lt;/a&gt;.
The post is inspired by deeplearning.ai courses.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding Neural Network - Regularization</title>
      <link>https://imaddabbura.github.io/post/coding-nn-regularization/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate>
      <guid>https://imaddabbura.github.io/post/coding-nn-regularization/</guid>
      <description>&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Bias-Variance Trade-off
&lt;/h2&gt;

&lt;p&gt;Generalization (test) error is the most important metric in Machine/Deep Learning. It gives us an estimate on the performance of the model on unseen data. Test error is decomposed into 3 parts (see above figure): &lt;strong&gt;Variance, Squared-Bias, and Irreducible Error&lt;/strong&gt;. Models with high bias are not complex enough (too simple) for the data and tend to underfit. The simplest model is taking the average (mode) of target variable and assign it to all predictions. On the contrary, models with high variance overfit the training data by closely follow (mimick) the training data where the learning algorithm will follow the signal and the noise. Note that as the complexity (flexibility) of the model increases â the model will become less interpretable such as Neural Networks. Below is the bias-variance decomposition:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(MSE = E(y - \widehat{y})^2\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\( = E(y - f + f - \widehat{y})^2\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\( = E((y - f)^2 + 2(y - f)(f - \widehat{y}) + (f - \widehat{y})^2); \quad substitute\ y = f + \epsilon\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\( = E((\epsilon + f - f)^2 + 2(\epsilon + f - f)(f - \widehat{y}) + (f - \widehat{y})^2)\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\( = E(\epsilon)^2 + E(\epsilon)E(f - \widehat{y}) + E(f - \widehat{y})^2; \quad where\ E(\epsilon) = 0\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\( = E(\epsilon)^2 + E(f - \widehat{y})^2;\quad add\ and\ subtract\ E(\widehat{y})\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\( = E(\epsilon)^2 + E(f - E(\widehat{y}) + E(\widehat{y}) - \widehat{y})^2\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\( = E(\epsilon)^2 + E(f - E(\widehat{y}))^2 + E(\widehat{y} - E(\widehat{y}))^2\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\Rightarrow MSE = var(\widehat{y}) + (Bias(\widehat{y}))^2 + var(\epsilon)\)&lt;/span&gt;
Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$var(\epsilon)$: Irreducible error that resulted from omitted features and unmeasured variation with each example.&lt;/li&gt;
&lt;li&gt;$Bias(\widehat{y})$: Error that is introduced by approximating a real-life problem with a simple model.&lt;/li&gt;
&lt;li&gt;$var(\widehat{y})$: amount by which $\widehat{y}$ would change if we estimated it using different data set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, we can control only the variance and the bias of the $\widehat{y}$ &lt;strong&gt;BUT NOT&lt;/strong&gt; irreducible error. As a result, our job is to try to estimate the right level of complexity to achieve the lowest test error.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Regularization
&lt;/h2&gt;

&lt;p&gt;Regularization adds stability to the learning algorithm by making it less sensitive to the training data and processes. Since we don&#39;t know and have no access to the true function that we can use to compare our estimated function with it, the best strategy would be to build a very complex model that fits the training data really well (overfitting) and regularize it so that it would have a good generalization (test) error. When using regularization, we try to reduce the generalization error and that may lead to increase the training error in the process which is okay because what we care about is how well the model generalizes. With regularization, we try to bring back the very complex model that suffers from overfitting to a good model by increasing bias and reducing variance. This builds on the assumption that complex model has large parameters and simple model has small parameters.&lt;/p&gt;

&lt;p&gt;Below are some methods used for regularization:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;L2 Parameter Regularization&lt;/strong&gt; It&#39;s also known as &lt;strong&gt;weight decay&lt;/strong&gt;. This method adds L2 norm penalty to the objective function to drive the weights towards the origin. Even though this method shrinks all weights by the same proportion towards zero; however, it will never make any weight to be exactly zero.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L1 Parameter Regularization (Lasso)&lt;/strong&gt; It can be seen as a feature selection method because; in contrast to L2 regularization, some weights will be actually zero. It shrinks all weights by the same amount by adding L1 norm penalty to the objective function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dropout&lt;/strong&gt; Dropout can be seen as an approximation to bagging techniques. On each iteration, we randomly shut down some neurons on each layer and don&#39;t use those neurons in both forward propagation and back-propagation. This will force the neural network to spread out weights and not focus on specific neurons because it will never know which neurons will show up on each iteration. Therefore, it can be seen as training different model on each iteration. Also, since we drop some neurons on each iteration, this will lead to smaller network which in turns means simpler network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Augmentation&lt;/strong&gt; Add fake data by using the training examples and adding distortions to them such as rescaling and rotating the images in the case of image recognition. The idea here is that it&#39;s always better to train the model on more data to achieve better performance. Note that augmented examples don&#39;t add much information to the model as much as independent examples do but still it&#39;s a valid alternative when collecting more data is not feasible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Early Stopping&lt;/strong&gt; This method tries to optimize the cost function and regularize it so that it would have lower generalization error. The way it works is that on each iteration we record the validation error. If the validation error improves, we store a copy of the parameters and will continue until the optimization algorithm terminates. It&#39;s a good method if computational time and resources is an issue for us.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we&#39;ll cover L2 parameter regularization.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
L2 Parameter Regularization
&lt;/h2&gt;

&lt;p&gt;We normally don&#39;t regularize bias and regularize weights only. We can use hessian matrix and it&#39;s eigenvalues and eigenvectors to see the sensitivity of the weights to the weight decay. The weight $w_i$ will be rescaled using $\frac{\lambda_i}{\lambda_i + \alpha}$ where $\lambda_i$ (eigenvalue) measures the sensitivity of hessian matrix in that direction (eigenvector) and $\alpha$ is the regularized hyperparameter. Therefore,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If $\lambda_i &amp;gt;&amp;gt; \alpha$, the cost function is very sensitive in that direction and the corresponding weight reduces the cost significantly $\Rightarrow$ don&#39;t decay (shrink) much.&lt;/li&gt;
&lt;li&gt;If $\lambda_i &amp;lt;&amp;lt; \alpha$, the cost function is not sensitive in that direction and the corresponding weight doesn&#39;t reduce the cost significantly $\Rightarrow$ decay (shrink) away towards zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The objective function (binary cross-entropy) would then change from:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[J = -\frac{1}{m} \sum\limits_{i = 1}^{m}  \large(y^{(i)}\log(a^{[L](i)}) + (1-y^{(i)})\log(1- a^{[L](i)}) \large)\tag{1}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[J\_{regularized} = \underbrace{-\frac{1}{m} \sum\limits_{i = 1}^{m}  \large(y^{(i)}\log(a^{[L](i)}) + (1-y^{(i)})\log(1- a^{[L](i)}) \large)}\_\text{cross-entropy cost}  + \underbrace{\frac{1}{m} \frac{\lambda}{2} \sum\limits_{l=1}^L \sum\limits_{i=1}^{n^l} \sum\limits_{j=1}^{n^{l-1}} W_{j,i}^{[l]2} }_\text{L2 regularization cost} \tag{2}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Also, the new gradients and the update equation would be:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(\nabla_w J_{regularized} = \nabla_w J + \frac{\lambda}{m}w\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(w = w - \alpha\nabla_w J - \alpha\frac{\lambda}{m}w\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\Rightarrow w = w\underbrace{(1 - \alpha\frac{\lambda}{m})}_\text{weight decay} - \nabla J\)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Note that here $\alpha$ is the learning rate and $\lambda$ is the regularized hyperparameter. As $\lambda$ increases, the bias increases (and the model becomes less flexible) with the following extreme cases (see figure 2):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$\lambda = 0$, no regularization.&lt;/li&gt;
&lt;li&gt;$\lambda \rightarrow \infty$, model becomes very simple where all weights are essentially zero. In the case of regression, we would end-up with the intercept only which is equal to the average of the target variable.&lt;/li&gt;
&lt;/ul&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/bias_variance_lambda.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/bias_variance_lambda.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Model complexity (underfitting/overfitting) as a function of regularization parameter $\lambda$.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;It sometimes maybe helpful to see how L2 parameter regularization works using normal equation. The normal quation is:
&lt;span  class=&#34;math&#34;&gt;\(W = (X^TX + \lambda I)^{-1}X^TY\tag{3}\)&lt;/span&gt;
This means that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding $\lambda$ to the variance would decrease the weight since $w_i = \frac{cov_{x, y}}{\sigma^2_x}$.&lt;/li&gt;
&lt;li&gt;Even if $X^TX$ is not invertible, adding $\lambda$ to each feature will make it full rank matrix $\Rightarrow$ invertible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To illustrate how regularization helps us reduce generalization error, we&#39;ll use the cats_vs_dogs dataset. The dataset has images for cats and dogs. We&#39;ll try to build a neural network to classify if the image has a cat or a dog. Each image is 64 x 64 pixels on RGB scale.&lt;/p&gt;

&lt;p&gt;We&#39;ll be using functions we wrote in &lt;a href=&#34;https://nbviewer.jupyter.org/github/ImadDabbura/blog-posts/blob/master/notebooks/Coding-Neural-Network-Forwad-Back-Propagation.ipynb&#34;&gt;&lt;em&gt;&amp;quot;Coding Neural Network - Forward Propagation and Backpropagation&amp;quot;&lt;/em&gt;&lt;/a&gt; post to initialize parameters, compute forward propagation, cross-entropy cost, gradients, etc.&lt;/p&gt;

&lt;p&gt;Let&#39;s import the data and take a look at the shape as well as a sample of a cat image from the training set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Loading packages
import sys

import h5py
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

sys.path.append(&amp;quot;../scripts/&amp;quot;)
from coding_neural_network_from_scratch import (initialize_parameters,
                                                L_model_forward,
                                                compute_cost,
                                                relu_gradient,
                                                sigmoid_gradient,
                                                tanh_gradient,
                                                update_parameters,
                                                accuracy)
from gradient_checking import dictionary_to_vector
from load_dataset import load_dataset_catvsdog

%matplotlib inline
sns.set_context(&amp;quot;notebook&amp;quot;)
plt.style.use(&amp;quot;fivethirtyeight&amp;quot;)
plt.rcParams[&#39;figure.figsize&#39;] = (12, 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import training data
train_dataset = h5py.File(&amp;quot;../data/train_catvnoncat.h5&amp;quot;)
X_train = np.array(train_dataset[&amp;quot;train_set_x&amp;quot;])
Y_train = np.array(train_dataset[&amp;quot;train_set_y&amp;quot;])

# Plot a sample image
plt.imshow(X_train[50])
plt.axis(&amp;quot;off&amp;quot;);

# Import test data
test_dataset = h5py.File(&amp;quot;../data/test_catvnoncat.h5&amp;quot;)
X_test = np.array(test_dataset[&amp;quot;test_set_x&amp;quot;])
Y_test = np.array(test_dataset[&amp;quot;test_set_y&amp;quot;])

# Transform data
X_train = X_train.reshape(209, -1).T
X_train = X_train / 255
Y_train = Y_train.reshape(-1, 209)

X_test = X_test.reshape(50, -1).T
X_test = X_test / 255
Y_test = Y_test.reshape(-1, 50)

# print the new shape of both training and test datasets
print(&amp;quot;Training data dimensions:&amp;quot;)
print(&amp;quot;X&#39;s dimension: {}, Y&#39;s dimension: {}&amp;quot;.format(X_train.shape, Y_train.shape))
print(&amp;quot;Test data dimensions:&amp;quot;)
print(&amp;quot;X&#39;s dimension: {}, Y&#39;s dimension: {}&amp;quot;.format(X_test.shape, Y_test.shape))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Training data dimensions:
X&#39;s dimension: (12288, 209), Y&#39;s dimension: (1, 209)
Test data dimensions:
X&#39;s dimension: (12288, 50), Y&#39;s dimension: (1, 50)
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/cat_sample.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/cat_sample.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Sample image.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;The training set has 209 examples and the test set has 50 examples. Let&#39;s first write all the helper functions that would help us write the multi-layer neural network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def compute_cost_reg(AL, y, parameters, lambd=0):
    # number of examples
    m = y.shape[1]

    # compute traditional cross entropy cost
    cross_entropy_cost = compute_cost(AL, y)

    # convert parameters dictionary to vector
    parameters_vector = dictionary_to_vector(parameters)

    # compute the regularization penalty
    L2_regularization_penalty = (
        lambd / (2 * m)) * np.sum(np.square(parameters_vector))

    # compute the total cost
    cost = cross_entropy_cost + L2_regularization_penalty

    return cost


def linear_backword_reg(dZ, cache, lambd=0):
    A_prev, W, b = cache
    m = A_prev.shape[1]

    dW = (1 / m) * np.dot(dZ, A_prev.T) + (lambd / m) * W
    db = (1 / m) * np.sum(dZ, axis=1, keepdims=True)
    dA_prev = np.dot(W.T, dZ)

    assert (dA_prev.shape == A_prev.shape)
    assert (dW.shape == W.shape)
    assert (db.shape == b.shape)

    return dA_prev, dW, db


def linear_activation_backward_reg(dA, cache, activation_fn=&amp;quot;relu&amp;quot;, lambd=0):
    linear_cache, activation_cache = cache

    if activation_fn == &amp;quot;sigmoid&amp;quot;:
        dZ = sigmoid_gradient(dA, activation_cache)
        dA_prev, dW, db = linear_backword_reg(dZ, linear_cache, lambd)

    elif activation_fn == &amp;quot;tanh&amp;quot;:
        dZ = tanh_gradient(dA, activation_cache)
        dA_prev, dW, db = linear_backword_reg(dZ, linear_cache, lambd)

    elif activation_fn == &amp;quot;relu&amp;quot;:
        dZ = relu_gradient(dA, activation_cache)
        dA_prev, dW, db = linear_backword_reg(dZ, linear_cache, lambd)

    return dA_prev, dW, db


def L_model_backward_reg(AL, y, caches, hidden_layers_activation_fn=&amp;quot;relu&amp;quot;,
                         lambd=0):
    y = y.reshape(AL.shape)
    L = len(caches)
    grads = {}

    dAL = np.divide(AL - y, np.multiply(AL, 1 - AL))

    grads[&amp;quot;dA&amp;quot; + str(L - 1)], grads[&amp;quot;dW&amp;quot; + str(L)], grads[&amp;quot;db&amp;quot; + str(L)] =\
        linear_activation_backward_reg(dAL, caches[L - 1], &amp;quot;sigmoid&amp;quot;, lambd)

    for l in range(L - 1, 0, -1):
        current_cache = caches[l - 1]
        grads[&amp;quot;dA&amp;quot; + str(l - 1)], grads[&amp;quot;dW&amp;quot; + str(l)], grads[&amp;quot;db&amp;quot; + str(l)] =\
            linear_activation_backward_reg(
                grads[&amp;quot;dA&amp;quot; + str(l)], current_cache,
                hidden_layers_activation_fn, lambd)

    return grads


def model_with_regularization(
        X, y, layers_dims, learning_rate=0.01,  num_epochs=3000,
        print_cost=False, hidden_layers_activation_fn=&amp;quot;relu&amp;quot;, lambd=0):
    # get number of examples
    m = X.shape[1]

    # to get consistents output
    np.random.seed(1)

    # initialize parameters
    parameters = initialize_parameters(layers_dims)

    # intialize cost list
    cost_list = []

    # implement gradient descent
    for i in range(num_epochs):
        # compute forward propagation
        AL, caches = L_model_forward(
            X, parameters, hidden_layers_activation_fn)

        # compute regularized cost
        reg_cost = compute_cost_reg(AL, y, parameters, lambd)

        # compute gradients
        grads = L_model_backward_reg(
            AL, y, caches, hidden_layers_activation_fn, lambd)

        # update parameters
        parameters = update_parameters(parameters, grads, learning_rate)

        # print cost
        if (i + 1) % 100 == 0 and print_cost:
            print(&amp;quot;The cost after {} iterations: {}&amp;quot;.format(
                (i + 1), reg_cost))

        # append cost
        if i % 100 == 0:
            cost_list.append(reg_cost)

    # plot the cost curve
    plt.plot(cost_list)
    plt.xlabel(&amp;quot;Iterations (per hundreds)&amp;quot;)
    plt.ylabel(&amp;quot;Cost&amp;quot;)
    plt.title(&amp;quot;Cost curve for the learning rate = {}&amp;quot;.format(learning_rate))

    return parameters
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&#39;re ready to train the neural network. We&#39;ll first build a neural network with no regularization and then one with regularization to see which one has lower generalization error. Note that $\lambda$ should be tuned to get the best results but we&#39;ll here choose an arbitrary value to illustrate the concept. Both neural netwotks would have 2 hidden layers where each hidden layer has 5 units.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# set up layers dimensions
layers_dims = [X_train.shape[0], 5, 5, 1]

# train NN
parameters = model_with_regularization(X_train, Y_train, layers_dims,
                                       learning_rate=0.03, num_epochs=2500, print_cost=True,
                                       hidden_layers_activation_fn=&amp;quot;tanh&amp;quot;,
                                       lambd=0)

# print the test accuracy
print(&amp;quot;The training accuracy rate: {}&amp;quot;.format(accuracy(X_train, parameters, Y_train, &amp;quot;tanh&amp;quot;)[-7:]))
print(&amp;quot;The test accuracy rate: {}&amp;quot;.format(accuracy(X_test, parameters, Y_test, &amp;quot;tanh&amp;quot;)[-7:]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations: 0.6555634398145331
The cost after 200 iterations: 0.6467746423961933
The cost after 300 iterations: 0.6446638811282552
The cost after 400 iterations: 0.6441400737542232
The cost after 500 iterations: 0.6440063101787575
The cost after 600 iterations: 0.6439697872317176
The cost after 700 iterations: 0.6439570623358253
The cost after 800 iterations: 0.6439491872993496
The cost after 900 iterations: 0.6439407592837082
The cost after 1000 iterations: 0.6439294591543208
The cost after 1100 iterations: 0.6439131091764411
The cost after 1200 iterations: 0.6438883396380859
The cost after 1300 iterations: 0.6438489715870495
The cost after 1400 iterations: 0.6437825798034876
The cost after 1500 iterations: 0.6436617691190204
The cost after 1600 iterations: 0.6434191397054715
The cost after 1700 iterations: 0.642864008138056
The cost after 1800 iterations: 0.6413476000796884
The cost after 1900 iterations: 0.6360827945885947
The cost after 2000 iterations: 0.6124050450908987
The cost after 2100 iterations: 0.511236045905345
The cost after 2200 iterations: 0.5287658028657057
The cost after 2300 iterations: 0.43124104856359174
The cost after 2400 iterations: 0.38213869447364884
The cost after 2500 iterations: 0.3386708692392079
The training accuracy rate: 82.30%.
The test accuracy rate: 78.00%.
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/loss_no_reg.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/loss_no_reg.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Cost curve with no regularization.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;The training accuracy is 82.30% but the test accuracy is 78%. The difference between training and test accuracy is not that much, i.e. we don&#39;t have a lot of overfitting. Therefore, a little bit of regularization may help such as $\lambda = 0.02$. Values of $\lambda$s that practitioners recommend are: 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 1.28, 2.56, 5.12, 10.24.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# train NN with regularization
parameters = model_with_regularization(X_train, Y_train, layers_dims,
                                       learning_rate=0.03, num_epochs=2500, print_cost=True,
                                       hidden_layers_activation_fn=&amp;quot;tanh&amp;quot;,
                                       lambd=0.02)

# print the test accuracy
print(&amp;quot;The training accuracy rate: {}&amp;quot;.format(accuracy(X_train, parameters, Y_train, &amp;quot;tanh&amp;quot;)[-7:]))
print(&amp;quot;The test accuracy rate: {}&amp;quot;.format(accuracy(X_test, parameters, Y_test, &amp;quot;tanh&amp;quot;)[-7:]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations: 0.6558634554205135
The cost after 200 iterations: 0.6470807090618383
The cost after 300 iterations: 0.6449737235917311
The cost after 400 iterations: 0.6444519406797673
The cost after 500 iterations: 0.6443191828114609
The cost after 600 iterations: 0.6442831256251426
The cost after 700 iterations: 0.6442705985766486
The cost after 800 iterations: 0.6442628048800636
The cost after 900 iterations: 0.6442544325786784
The cost after 1000 iterations: 0.6442432311807257
The cost after 1100 iterations: 0.6442270988055475
The cost after 1200 iterations: 0.6442027847231018
The cost after 1300 iterations: 0.6441643410411311
The cost after 1400 iterations: 0.6440998547029029
The cost after 1500 iterations: 0.6439832000181198
The cost after 1600 iterations: 0.6437505375793907
The cost after 1700 iterations: 0.6432228625403317
The cost after 1800 iterations: 0.6417982979158361
The cost after 1900 iterations: 0.6369273437378263
The cost after 2000 iterations: 0.6152774362019153
The cost after 2100 iterations: 0.5207828651496548
The cost after 2200 iterations: 0.5145012356446598
The cost after 2300 iterations: 0.40757220705507585
The cost after 2400 iterations: 0.517757346098386
The cost after 2500 iterations: 0.4574831239241244
The training accuracy rate: 65.55%.
The test accuracy rate: 80.00%.
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/loss_reg.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/loss_reg.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Cost curve with regularization.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;As the results above show, we improved the generalization error by increasing the test accuracy from 78% to 80%. On the other hand, training accuracy decreased from 82.30% to 65.55%.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Conclusion
&lt;/h2&gt;

&lt;p&gt;Regularization is an effective technique to resolve overfitting. Since we don&#39;t know true distribution of the data, empirical risk, which is based of empirical distribution, is prone to overfitting. Therefore, the best strategy is to fit training data really well and then use a regularization technique so that the model generalizes well. L2 parameter regularization along with Dropout are two of the most widely used regularization technique in machine learning.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One of the implicit assumptions of regularization techniques such as L2 and L1 parameter regularization is that the value of the parameters should be zero and try to shrink all parameters towards zero. It&#39;s meant to avoid following the training data very well which makes the learning algorithm picks some noise that is not helpful when applied on unseen data.&lt;/li&gt;
&lt;li&gt;The value of $\lambda$ should be tuned to get the best generalization error. We typically use validation set when comparing models with values for $\lambda$s and pick the one with the lowest validation error.&lt;/li&gt;
&lt;li&gt;Only use regularization if the model suffers from overfitting, i.e training error &amp;lt;&amp;lt; validation error.&lt;/li&gt;
&lt;li&gt;If after using regularization the validation error is still high, then we&#39;re most likely in the underfitting region. In other words, our model is still too simple and already has high bias. Therefore, add complexity to the model and then use regularization.&lt;/li&gt;
&lt;li&gt;Since the majority of tasks we try to solve don&#39;t have enough data (or expensive to collect more data), overfitting will be more prevalent in Deep Learning than underfitting given the complexity of neural networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code that created this post can be found &lt;a href=&#34;https://github.com/ImadDabbura/blog-posts/blob/master/notebooks/Coding-Neural-Network-Regularization.ipynb&#34;&gt;here&lt;/a&gt;.
The post is inspired by deeplearning.ai courses.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding Neural Network - Parameters&#39; Initialization</title>
      <link>https://imaddabbura.github.io/post/coding-nn-params-init/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://imaddabbura.github.io/post/coding-nn-params-init/</guid>
      <description>&lt;p&gt;Optimization, in Machine Learning/Deep Learning contexts, is the process of changing the model&#39;s parameters to improve its performance. In other words, it&#39;s the process of finding the best parameters in the predefined hypothesis space to get the best possible performance. There are three kinds of optimization algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimization algorithm that is not iterative and simply solves for one point.&lt;/li&gt;
&lt;li&gt;Optimization algorithm that is iterative in nature and converges to acceptable solution regardless of the parameters initialization such as gradient descent applied to logistic regression.&lt;/li&gt;
&lt;li&gt;Optimization algorithm that is iterative in nature and applied to a set of problems that have non-convex loss functions such as neural networks. Therefore, parameters&#39; initialization plays a critical role in speeding up convergence and achieving lower error rates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we&#39;ll look at three different cases of parameters&#39; initialization and see how this affects the error rate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initialize all parameters to zero.&lt;/li&gt;
&lt;li&gt;Initialize parameters to random values from standard normal distribution or uniform distribution and multiply it by a scalar such as 10.&lt;/li&gt;
&lt;li&gt;Initialize parameters based on:

&lt;ul&gt;
&lt;li&gt;Xavier recommendation.&lt;/li&gt;
&lt;li&gt;Kaiming He recommendation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&#39;ll be using functions we wrote in &lt;a href=&#34;https://imaddabbura.github.io/blog/machine%20learning/deep%20learning/2018/04/01/coding-neural-network-fwd-back-prop.html&#34;&gt;&lt;em&gt;&amp;quot;Coding Neural Network - Forward Propagation and Backpropagation&amp;quot;&lt;/em&gt;&lt;/a&gt; post to initialize parameters, compute forward propagation and back-propagation as well as the cross-entropy cost.&lt;/p&gt;

&lt;p&gt;To illustrate the above cases, we&#39;ll use the cats vs dogs dataset which consists of 50 images for cats and 50 images for dogs. Each image is 150 pixels x 150 pixels on RGB color scale. Therefore, we would have 67,500 features where each column in the input matrix would be one image which means our input data would have 67,500 x 100 dimension.&lt;/p&gt;

&lt;p&gt;Let&#39;s first load the data and show a sample of two images before we start the helper functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Loading packages
import sys

import h5py
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

sys.path.append(&amp;quot;../scripts/&amp;quot;)
from coding_neural_network_from_scratch import (L_model_forward,
                                                compute_cost,
                                                L_model_backward,
                                                update_parameters,
                                                accuracy)
from load_dataset import load_dataset_catvsdog

%matplotlib inline
sns.set_context(&amp;quot;notebook&amp;quot;)
plt.style.use(&amp;quot;fivethirtyeight&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X, Y = load_dataset_catvsdog(&amp;quot;../data&amp;quot;)

# show a sample of of a cat and a dog image
index_cat = np.argmax(Y); index_dog = np.argmin(Y)
plt.subplot(1, 2, 1)
plt.imshow(X[:, index_cat].reshape(150, 150, 3))
plt.axis(&amp;quot;off&amp;quot;)
plt.subplot(1, 2, 2)
plt.imshow(X[:, index_dog].reshape(150, 150, 3))
plt.axis(&amp;quot;off&amp;quot;);

# standarize the data
X = X / 255
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/sample_images.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/sample_images.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Sample images.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;We&#39;ll write now all the helper functions that will help us initialize parameters based on different methods as well as writing L-layer model that we&#39;ll be using to train our neural network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def initialize_parameters_zeros(layers_dims):
    np.random.seed(1)               
    parameters = {}                 
    L = len(layers_dims)            

    for l in range(1, L):
        parameters[&amp;quot;W&amp;quot; + str(l)] = np.zeros(
            (layers_dims[l], layers_dims[l - 1]))
        parameters[&amp;quot;b&amp;quot; + str(l)] = np.zeros((layers_dims[l], 1))

    return parameters


def initialize_parameters_random(layers_dims):
    np.random.seed(1)               
    parameters = {}                 
    L = len(layers_dims)            

    for l in range(1, L):
        parameters[&amp;quot;W&amp;quot; + str(l)] = np.random.randn(
            layers_dims[l], layers_dims[l - 1]) * 10
        parameters[&amp;quot;b&amp;quot; + str(l)] = np.zeros((layers_dims[l], 1))

    return parameters


def initialize_parameters_he_xavier(layers_dims, initialization_method=&amp;quot;he&amp;quot;):
    np.random.seed(1)               
    parameters = {}                 
    L = len(layers_dims)            

    if initialization_method == &amp;quot;he&amp;quot;:
        for l in range(1, L):
            parameters[&amp;quot;W&amp;quot; + str(l)] = np.random.randn(
                layers_dims[l],
                layers_dims[l - 1]) * np.sqrt(2 / layers_dims[l - 1])
            parameters[&amp;quot;b&amp;quot; + str(l)] = np.zeros((layers_dims[l], 1))
    elif initialization_method == &amp;quot;xavier&amp;quot;:
        for l in range(1, L):
            parameters[&amp;quot;W&amp;quot; + str(l)] = np.random.randn(
                layers_dims[l],
                layers_dims[l - 1]) * np.sqrt(1 / layers_dims[l - 1])
            parameters[&amp;quot;b&amp;quot; + str(l)] = np.zeros((layers_dims[l], 1))

    return parameters

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def model(X, Y, layers_dims, learning_rate=0.01, num_iterations=1000,
          print_cost=True, hidden_layers_activation_fn=&amp;quot;relu&amp;quot;,
          initialization_method=&amp;quot;he&amp;quot;):
    np.random.seed(1)

    # initialize cost list
    cost_list = []

    # initialize parameters
    if initialization_method == &amp;quot;zeros&amp;quot;:
        parameters = initialize_parameters_zeros(layers_dims)
    elif initialization_method == &amp;quot;random&amp;quot;:
        parameters = initialize_parameters_random(layers_dims)
    else:
        parameters = initialize_parameters_he_xavier(
            layers_dims, initialization_method)

    # iterate over num_iterations
    for i in range(num_iterations):
        # iterate over L-layers to get the final output and the cache
        AL, caches = L_model_forward(
            X, parameters, hidden_layers_activation_fn)

        # compute cost to plot it
        cost = compute_cost(AL, Y)

        # iterate over L-layers backward to get gradients
        grads = L_model_backward(AL, Y, caches, hidden_layers_activation_fn)

        # update parameters
        parameters = update_parameters(parameters, grads, learning_rate)

        # append each 100th cost to the cost list
        if (i + 1) % 100 == 0 and print_cost:
            print(&amp;quot;The cost after {} iterations is: {}&amp;quot;.format(i + 1, cost))

        if i % 100 == 0:
            cost_list.append(cost)

    # plot the cost curve
    plt.figure(figsize=(12, 8))
    plt.plot(cost_list)
    plt.xlabel(&amp;quot;Iterations (per hundreds)&amp;quot;, fontsize=14)
    plt.ylabel(&amp;quot;Cost&amp;quot;, fontsize=14)
    plt.title(
        &amp;quot;Cost curve: learning rate = {} and {} initialization method&amp;quot;.format(
            learning_rate, initialization_method), y=1.05, fontsize=16)

    return parameters

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Initializing all parameters to zero
&lt;/h2&gt;

&lt;p&gt;Here, we&#39;ll initialize all weight matrices and biases to zeros and see how this would affect the error rate as well as the learning parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# train NN with zeros initialization parameters
layers_dims = [X.shape[0], 5, 5, 1]
parameters = model(X, Y, layers_dims, hidden_layers_activation_fn=&amp;quot;tanh&amp;quot;,
                   initialization_method=&amp;quot;zeros&amp;quot;)

accuracy(X, parameters, Y,&amp;quot;tanh&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations is: 0.6931471805599453
The cost after 200 iterations is: 0.6931471805599453
The cost after 300 iterations is: 0.6931471805599453
The cost after 400 iterations is: 0.6931471805599453
The cost after 500 iterations is: 0.6931471805599453
The cost after 600 iterations is: 0.6931471805599453
The cost after 700 iterations is: 0.6931471805599453
The cost after 800 iterations is: 0.6931471805599453
The cost after 900 iterations is: 0.6931471805599453
The cost after 1000 iterations is: 0.6931471805599453

&#39;The accuracy rate is: 50.00%.&#39;
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/zero_params.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/zero_params.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Cost curve using zero intialization method.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;As the cost curve shows, the neural network didn&#39;t learn anything! That is because of symmetry between all neurons which leads to all neurons have the same update on every iteration. Therefore, regardless of how many iterations we run the optimization algorithms, all the neurons would still get the same update and no learning would happen. As a result, we must &lt;strong&gt;break symmetry&lt;/strong&gt; when initializing parameters so that the model would start learning on each update of the gradient descent.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Initializing parameters with big random values
&lt;/h2&gt;

&lt;p&gt;There is no big difference if the random values are initialized from standard normal distribution or uniform distribution so we&#39;ll use standard normal distribution in our examples. Also, we&#39;ll multiply the random values by a big number such as 10 to show that initializing parameters to big values may cause our optimization to have higher error rates (and even diverge in some cases). Let&#39;s now train our neural network where all weight matrices have been intitialized using the following formula:
&lt;code&gt;np.random.randn() * 10&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# train NN with random initialization parameters
layers_dims = [X.shape[0], 5, 5, 1]
parameters = model(X, Y, layers_dims, hidden_layers_activation_fn=&amp;quot;tanh&amp;quot;,
                   initialization_method=&amp;quot;random&amp;quot;)

accuracy(X, parameters, Y,&amp;quot;tanh&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations is: 1.2413142077549013
The cost after 200 iterations is: 1.1258751902393416
The cost after 300 iterations is: 1.0989052435267657
The cost after 400 iterations is: 1.0840966471282327
The cost after 500 iterations is: 1.0706953292105978
The cost after 600 iterations is: 1.0574847320236294
The cost after 700 iterations is: 1.0443168708889223
The cost after 800 iterations is: 1.031157857251139
The cost after 900 iterations is: 1.0179838815204902
The cost after 1000 iterations is: 1.004767088515343

&#39;The accuracy rate is: 55.00%.&#39;
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/random_weights.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/random_weights.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Cost curve using random initialization method.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Random initialization here is helping but still the loss function has high value and may take long time to converge and achieve a significantly low value.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Initializing parameters based on He and Xavier recommendations
&lt;/h2&gt;

&lt;p&gt;We&#39;ll explore two initialization methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kaiming He method is best applied when activation function applied on hidden layers is Rectified Linear Unit (ReLU). so that the weight on each hidden layer would have the following variance:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(var(W^l) = \frac{2}{n^{l - 1}}\)&lt;/span&gt;
We can achieve this by multiplying the random values from standard normal distribution by $\sqrt{\frac{2}{number\ of\ units\ in \ previous\ layer}}$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Xavier method is best applied when activation function applied on hidden layers is Hyperbolic Tangent so that the weight on each hidden layer would have the following variance:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(var(W^l) = \frac{1}{n^{l - 1}}\)&lt;/span&gt;
We can achieve this by multiplying the random values from standard normal distribution by $\sqrt{\frac{1}{number\ of\ units\ in \ previous\ layer}}$&lt;/p&gt;

&lt;p&gt;We&#39;ll train the network using both methods and look at the results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# train NN where all parameters were initialized based on He recommendation
layers_dims = [X.shape[0], 5, 5, 1]
parameters = model(X, Y, layers_dims, hidden_layers_activation_fn=&amp;quot;tanh&amp;quot;,
                   initialization_method=&amp;quot;he&amp;quot;)

accuracy(X, parameters, Y, &amp;quot;tanh&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations is: 0.6300611704834093
The cost after 200 iterations is: 0.49092836452522753
The cost after 300 iterations is: 0.46579423512433943
The cost after 400 iterations is: 0.6516254192289226
The cost after 500 iterations is: 0.32487779301799485
The cost after 600 iterations is: 0.4631461605716059
The cost after 700 iterations is: 0.8050310690163623
The cost after 800 iterations is: 0.31739195517372376
The cost after 900 iterations is: 0.3094592175030812
The cost after 1000 iterations is: 0.19934509244449203

&#39;The accuracy rate is: 99.00%.&#39;
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/he.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/he.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Cost curve using He initialization method.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# train NN where all parameters were initialized based on Xavier recommendation
layers_dims = [X.shape[0], 5, 5, 1]
parameters = model(X, Y, layers_dims, hidden_layers_activation_fn=&amp;quot;tanh&amp;quot;,
                   initialization_method=&amp;quot;xavier&amp;quot;)

accuracy(X, parameters, Y, &amp;quot;tanh&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations is: 0.6351961521800779
The cost after 200 iterations is: 0.548973489787121
The cost after 300 iterations is: 0.47982386652748565
The cost after 400 iterations is: 0.32811768889968684
The cost after 500 iterations is: 0.2793453045790634
The cost after 600 iterations is: 0.3258507563809604
The cost after 700 iterations is: 0.2873032724176074
The cost after 800 iterations is: 0.0924974839405706
The cost after 900 iterations is: 0.07418011931058155
The cost after 1000 iterations is: 0.06204402572328295

&#39;The accuracy rate is: 99.00%.&#39;
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/xafier.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/xafier.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Cost curve using Xavier initialization method.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;As shown from applying the four methods, parameters&#39; initial values play a huge role in achieving low cost values as well as converging and achieve lower training error rates. The same would apply to test error rate if we had test data.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Conclusion
&lt;/h2&gt;

&lt;p&gt;Deep Learning frameworks make it easier to choose between different initialization methods without worrying about implementing it ourselves. Nonetheless, it&#39;s important to understand the critical role initial values of the parameters in the overall performance of the network. Below are some key takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Well chosen initialization values of parameters leads to:

&lt;ul&gt;
&lt;li&gt;Speed up convergence of gradient descent.&lt;/li&gt;
&lt;li&gt;Increase the likelihood of gradient descent to find lower training and generalization error rates.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Because we&#39;re dealing with iterative optimization algorithms with non-convex loss function, different initializations lead to different results.&lt;/li&gt;
&lt;li&gt;Random initialization is used to break symmetry and make sure different hidden units can learn different things.&lt;/li&gt;
&lt;li&gt;Don&#39;t initialize to values that are too large.&lt;/li&gt;
&lt;li&gt;Kaiming He (He) initialization works well for neural networks with ReLU activation function.&lt;/li&gt;
&lt;li&gt;Xavier initialization works well for neural networks with Hyperbolic Tangent activation function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code that created this post can be found &lt;a href=&#34;https://github.com/ImadDabbura/blog-posts/blob/master/notebooks/Coding-Neural-Network-Parameters-Initialization.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding Neural Network - Gradient Checking</title>
      <link>https://imaddabbura.github.io/post/coding-nn-gradient-checking/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://imaddabbura.github.io/post/coding-nn-gradient-checking/</guid>
      <description>&lt;p&gt;In the previous post, &lt;a href=&#34;https://imaddabbura.github.io/blog/machine%20learning/deep%20learning/2018/04/01/coding-neural-network-fwd-back-prop.html&#34;&gt;&lt;em&gt;Coding Neural Network - Forward Propagation and Backpropagation&lt;/em&gt;&lt;/a&gt;, we implemented both forward propagation and backpropagation in &lt;code&gt;numpy&lt;/code&gt;. However, implementing backpropagation from scratch is usually more prune to bugs/errors. Therefore, it&#39;s necessary before running the neural network on training data to check if our implementation of backpropagation is correct. Before we start, let&#39;s revisit what back-propagation is: We loop over the nodes in reverse topological order starting at the final node to compute the derivative of the cost with respect to each edge&#39;s node tail. In other words, we compute the derivative of cost function with respect to all parameters, i.e $\frac{\partial J}{\partial \theta}$ where $\theta$ represents the parameters of the model.&lt;/p&gt;

&lt;p&gt;The way to test our implementation is by computing numerical gradients and compare it with gradients from backpropagation (analytical). There are two way of computing numerical gradients:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right-hand form:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{J(\theta + \epsilon) - J(\theta)}{\epsilon}\tag{1}\]&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two-sided form (see figure 2):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{J(\theta + \epsilon) - J(\theta - \epsilon)}{2 \epsilon}\tag{2}\]&lt;/span&gt;&lt;/p&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/two_sided_gradients.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/two_sided_gradients.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Two-sided numerical gradients.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Two-sided form of approximating the derivative is closer than the right-hand form. Let&#39;s illustrate that with the following example using the function $f(x) = x^2$ by taking its derivative at $x = 3$.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analytical derivative:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\nabla_x f(x) = 2x\ \Rightarrow\nabla_x f(3) = 6\]&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two-sided numerical derivative:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{(3 + 1e-2)^2 - (3 - 1e-2)^2}{2 * 1e-2} = 5.999999999999872\]&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right-hand numerical derivative:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{(3 + 1e-2)^2 - 3^2}{1e-2} = 6.009999999999849\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As we see above, the difference between analytical derivative and two-sided numerical gradient is almost zero; however, the difference between analytical derivative and right-sided derivative is 0.01. Therefore, we&#39;ll use two-sided epsilon method to compute the numerical gradients.&lt;/p&gt;

&lt;p&gt;In addition, we&#39;ll normalize the difference between numerical. gradients and analytical gradients using the following formula:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{\|grad - grad\_{approx}\|_2}{\|grad\|_2 + \|grad\_{approx}\|_2}\tag{3}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;If the difference is $\leq 10^{-7}$, then our implementation is fine; otherwise, we have a mistake somewhere and have to go back and revisit backpropagation code.&lt;/p&gt;

&lt;p&gt;Below are the steps needed to implement gradient checking:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pick random number of examples from training data to use it when computing both numerical and analytical gradients.

&lt;ul&gt;
&lt;li&gt;Don&#39;t use all examples in the training data because gradient checking is very slow.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Initialize parameters.&lt;/li&gt;
&lt;li&gt;Compute forward propagation and the cross-entropy cost.&lt;/li&gt;
&lt;li&gt;Compute the gradients using our back-propagation implementation.&lt;/li&gt;
&lt;li&gt;Compute the numerical gradients using the two-sided epsilon method.&lt;/li&gt;
&lt;li&gt;Compute the difference between numerical and analytical gradients.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&#39;ll be using functions we wrote in &lt;em&gt;&amp;quot;Coding Neural Network - Forward Propagation and Backpropagation&amp;quot;&lt;/em&gt; post to initialize parameters, compute forward propagation and back-propagation as well as the cross-entropy cost.&lt;/p&gt;

&lt;p&gt;Let&#39;s first import the data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Loading packages
import sys

import h5py
import matplotlib.pyplot as plt
import numpy as np
from numpy.linalg import norm
import seaborn as sns

sys.path.append(&amp;quot;../scripts/&amp;quot;)
from coding_neural_network_from_scratch import (initialize_parameters,
                                                L_model_forward,
                                                L_model_backward,
                                                compute_cost)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import the data
train_dataset = h5py.File(&amp;quot;../data/train_catvnoncat.h5&amp;quot;)
X_train = np.array(train_dataset[&amp;quot;train_set_x&amp;quot;]).T
y_train = np.array(train_dataset[&amp;quot;train_set_y&amp;quot;]).T
X_train = X_train.reshape(-1, 209)
y_train = y_train.reshape(-1, 209)

X_train.shape, y_train.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;((12288, 209), (1, 209))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we&#39;ll write helper functions that faciltate converting parameters and gradients dictionaries into vectors and then re-convert them back to dictionaries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def dictionary_to_vector(params_dict):
    count = 0
    for key in params_dict.keys():
        new_vector = np.reshape(params_dict[key], (-1, 1))
        if count == 0:
            theta_vector = new_vector
        else:
            theta_vector = np.concatenate((theta_vector, new_vector))
        count += 1

    return theta_vector


def vector_to_dictionary(vector, layers_dims):
    L = len(layers_dims)
    parameters = {}
    k = 0

    for l in range(1, L):
        # Create temp variable to store dimension used on each layer
        w_dim = layers_dims[l] * layers_dims[l - 1]
        b_dim = layers_dims[l]

        # Create temp var to be used in slicing parameters vector
        temp_dim = k + w_dim

        # add parameters to the dictionary
        parameters[&amp;quot;W&amp;quot; + str(l)] = vector[
            k:temp_dim].reshape(layers_dims[l], layers_dims[l - 1])
        parameters[&amp;quot;b&amp;quot; + str(l)] = vector[
            temp_dim:temp_dim + b_dim].reshape(b_dim, 1)

        k += w_dim + b_dim

    return parameters


def gradients_to_vector(gradients):
    # Get the number of indices for the gradients to iterate over
    valid_grads = [key for key in gradients.keys()
                   if not key.startswith(&amp;quot;dA&amp;quot;)]
    L = len(valid_grads)// 2
    count = 0
    
    # Iterate over all gradients and append them to new_grads list
    for l in range(1, L + 1):
        if count == 0:
            new_grads = gradients[&amp;quot;dW&amp;quot; + str(l)].reshape(-1, 1)
            new_grads = np.concatenate(
                (new_grads, gradients[&amp;quot;db&amp;quot; + str(l)].reshape(-1, 1)))
        else:
            new_grads = np.concatenate(
                (new_grads, gradients[&amp;quot;dW&amp;quot; + str(l)].reshape(-1, 1)))
            new_grads = np.concatenate(
                (new_grads, gradients[&amp;quot;db&amp;quot; + str(l)].reshape(-1, 1)))
        count += 1
        
    return new_grads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we&#39;ll write the gradient checking function that will compute the difference between the analytical and numerical gradients and tell us if our implementation of back-propagation is correct. We&#39;ll randomly choose 1 example to compute the difference.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def forward_prop_cost(X, parameters, Y, hidden_layers_activation_fn=&amp;quot;tanh&amp;quot;):
    # Compute forward prop
    AL, _ = L_model_forward(X, parameters, hidden_layers_activation_fn)

    # Compute cost
    cost = compute_cost(AL, Y)

    return cost


def gradient_check(
        parameters, gradients, X, Y, layers_dims, epsilon=1e-7,
        hidden_layers_activation_fn=&amp;quot;tanh&amp;quot;):
    # Roll out parameters and gradients dictionaries
    parameters_vector = dictionary_to_vector(parameters)
    gradients_vector = gradients_to_vector(gradients)

    # Create vector of zeros to be used with epsilon
    grads_approx = np.zeros_like(parameters_vector)

    for i in range(len(parameters_vector)):
        # Compute cost of theta + epsilon
        theta_plus = np.copy(parameters_vector)
        theta_plus[i] = theta_plus[i] + epsilon
        j_plus = forward_prop_cost(
            X, vector_to_dictionary(theta_plus, layers_dims), Y,
            hidden_layers_activation_fn)

        # Compute cost of theta - epsilon
        theta_minus = np.copy(parameters_vector)
        theta_minus[i] = theta_minus[i] - epsilon
        j_minus = forward_prop_cost(
            X, vector_to_dictionary(theta_minus, layers_dims), Y,
            hidden_layers_activation_fn)

        # Compute numerical gradients
        grads_approx[i] = (j_plus - j_minus) / (2 * epsilon)

    # Compute the difference of numerical and analytical gradients
    numerator = norm(gradients_vector - grads_approx)
    denominator = norm(grads_approx) + norm(gradients_vector)
    difference = numerator / denominator

    if difference &amp;gt; 10e-7:
        print (&amp;quot;\033[31mThere is a mistake in back-propagation &amp;quot; +\
               &amp;quot;implementation. The difference is: {}&amp;quot;.format(difference))
    else:
        print (&amp;quot;\033[32mThere implementation of back-propagation is fine! &amp;quot;+\
               &amp;quot;The difference is: {}&amp;quot;.format(difference))

    return difference
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Set up neural network architecture
layers_dims = [X_train.shape[0], 5, 5, 1]

# Initialize parameters
parameters = initialize_parameters(layers_dims)

# Randomly selecting 1 example from training data
perms = np.random.permutation(X_train.shape[1])
index = perms[:1]

# Compute forward propagation
AL, caches = L_model_forward(X_train[:, index], parameters, &amp;quot;tanh&amp;quot;)

# Compute analytical gradients
gradients = L_model_backward(AL, y_train[:, index], caches, &amp;quot;tanh&amp;quot;)

# Compute difference of numerical and analytical gradients
difference = gradient_check(parameters, gradients, X_train[:, index], y_train[:, index], layers_dims)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There implementation of back-propagation is fine! The difference is: 3.0220555297630148e-09&lt;/p&gt;

&lt;p&gt;Congratulations! Our implementation is correct ð&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Conclusion
&lt;/h2&gt;

&lt;p&gt;Below are some key takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two-sided numerical gradient approximates the analytical gradients more closely than right-side form.&lt;/li&gt;
&lt;li&gt;Since gradient checking is very slow:

&lt;ul&gt;
&lt;li&gt;Apply it on one or few training examples.&lt;/li&gt;
&lt;li&gt;Turn it off when training neural network after making sure that backpropagation&#39;s implementation is correct.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Gradient checking doesn&#39;t work when applying drop-out method. Use keep-prob = 1 to check gradient checking and then change it when training neural network.&lt;/li&gt;
&lt;li&gt;Epsilon = $10e-7$ is a common value used for the difference between analytical gradient and numerical gradient. If the difference is less than 10e-7 then the implementation of backpropagation is correct.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;em&gt;Deep Learning&lt;/em&gt; frameworks such as Tensorflow and Pytorch, we may find ourselves rarely implement backpropagation because such frameworks compute that for us; however, it&#39;s a good practice to understand what happens under the hood to become a good Deep Learning practitioner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code that created this post can be found &lt;a href=&#34;https://github.com/ImadDabbura/blog-posts/blob/master/notebooks/Coding-Neural-Network-Gradient-Checking.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding Neural Network - Forward Propagation and Backpropagtion</title>
      <link>https://imaddabbura.github.io/post/coding-nn-fwd-bckwd-prop/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://imaddabbura.github.io/post/coding-nn-fwd-bckwd-prop/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why Neural Networks?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;em&gt;Universal Approximate Theorem&lt;/em&gt;, Neural Networks can approximate as well as learn and represent any function given a large enough layer and desired error margin. The way neural network learns the true function is by building complex representations on top of simple ones. On each hidden layer, the neural network learns new feature space by first compute the affine (linear) transformations of the given inputs and then apply non-linear function which in turn will be the input of the next layer. This process will continue until we reach the output layer. Therefore, we can define neural network as information flows from inputs through hidden layers towards the output. For a 3-layers neural network, the learned function would be: $f(x) = f_3(f_2(f_1(x)))$ where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$f_1(x)$: Function learned on first hidden layer&lt;/li&gt;
&lt;li&gt;$f_2(x)$: Function learned on second hidden layer&lt;/li&gt;
&lt;li&gt;$f_3(x)$: Function learned on output layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, on each layer we learn different representation that gets more complicated with later hidden layers.Below is an example of a 3-layers neural network (we don&#39;t count input layer):&lt;/p&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/neural_net.jpg&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/neural_net.jpg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Neural Network with two hidden layers.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;For example, computers can&#39;t understand images directly and don&#39;t know what to do with pixels data. However, a neural network can build a simple representation of the image in the early hidden layers that identifies edges. Given the first hidden layer output, it can learn corners and contours. Given the second hidden layer, it can learn parts such as nose. Finally, it can learn the object identity.&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;truth is never linear&lt;/strong&gt; and representation is very critical to the performance of a machine learning algorithm, neural network can help us build very complex models and leave it to the algorithm to learn such representations without worrying about feature engineering that takes practitioners very long time and effort to curate a good representation.&lt;/p&gt;

&lt;p&gt;The post has two parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#CodingNN&#34;&gt;Coding the neural network&lt;/a&gt;: This entails writing all the helper functions that would allow us to implement a multi-layer neural network. While doing so, I&#39;ll explain the theoretical parts whenever possible and give some advices on implementations.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Application&#34;&gt;Application&lt;/a&gt;: We&#39;ll implement the neural network we coded in the first part on image recognition problem to see if the network we built will be able to detect if the image has a cat or a dog and see it working :)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This post will be the first in a series of posts that cover implementing neural network in numpy including &lt;em&gt;gradient checking, parameter initialization, L2 regularization, dropout&lt;/em&gt;. The code that created this post can be found &lt;a href=&#34;https://nbviewer.jupyter.org/github/ImadDabbura/blog-posts/blob/master/notebooks/Coding-Neural-Network-Forwad-Back-Propagation.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import packages
import h5py
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;CodingNN&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
I. Coding The Neural Network
&lt;/h2&gt;

&lt;h3 style=&#34;font-family: Georgia; font-size:1.5em;color:purple; font-style:bold&#34;&gt;
Forward Propagation
&lt;/h3&gt;

&lt;p&gt;The input $X$ provides the initial information that then propagates to the hidden units at each layer and finally produce the output $\widehat{Y}$. The architecture of the network entails determining its depth, width, and activation functions used on each layer. &lt;strong&gt;Depth&lt;/strong&gt; is the number of hidden layers. &lt;strong&gt;Width&lt;/strong&gt; is the number of units (nodes) on each hidden layer since we don&#39;t control neither input layer nor output layer dimensions. There are quite a few set of activation functions such &lt;em&gt;Rectified Linear Unit, Sigmoid, Hyperbolic tangent, etc&lt;/em&gt;. Research has proven that deeper networks outperform networks with more hidden units. Therefore, it&#39;s always better and won&#39;t hurt to train a deeper network (with diminishing returns).&lt;/p&gt;

&lt;p&gt;Lets first introduce some notations that will be used throughout the post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$W^l$: Weights matrix for the $l^{th}$ layer&lt;/li&gt;
&lt;li&gt;$b^l$: Bias vector for the $l^{th}$ layer&lt;/li&gt;
&lt;li&gt;$Z^l$: Linear (affine) transformations of given inputs for the $l^{th}$ layer&lt;/li&gt;
&lt;li&gt;$g^l$: Activation function applied on the $l^{th}$ layer&lt;/li&gt;
&lt;li&gt;$A^l$: Post-activation output for the $l^{th}$ layer&lt;/li&gt;
&lt;li&gt;$dW^l$: Derivative of the cost function w.r.t  $W^l$ ($\frac{\partial J}{\partial W^l}$)&lt;/li&gt;
&lt;li&gt;$db^l$: Derivative of the cost function w.r.t $b^l$ ($\frac{\partial J}{\partial b^l})$)&lt;/li&gt;
&lt;li&gt;$dZ^l$: Derivative of the cost function w.r.t $Z^l$ ($\frac{\partial J}{\partial Z^l}$)&lt;/li&gt;
&lt;li&gt;$dA^l$: Derivative of the cost function w.r.t $A^l$ ($\frac{\partial J}{\partial A^l}$)&lt;/li&gt;
&lt;li&gt;$n^l$: Number of units (nodes) of the $l^{th}$ layer&lt;/li&gt;
&lt;li&gt;$m$: Number of examples&lt;/li&gt;
&lt;li&gt;$L$: Number of layers in the network (not including the input layer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we&#39;ll write down the dimensions of a multi-layer neural network in the general form to help us in matrix multiplication because one of the major challenges in implementing a neural network is getting the dimensions right.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$W^l$, $dW^l$: Number of units (nodes) in $l^{th}$ layer x Number of units (nodes) in $l - 1$ layer&lt;/li&gt;
&lt;li&gt;$b^l$, $db^l$: Number of units (nodes) in $l^{th}$ layer x 1&lt;/li&gt;
&lt;li&gt;$Z^l$, $dZ^l$: Number of units (nodes) in $l^{th}$ layer x number of examples&lt;/li&gt;
&lt;li&gt;$A^l$, $dA^l$: Number of units (nodes) in $l^{th}$ layer x number of examples&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two equations we need to implement forward propagations are:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(Z^l = W^lA^{l - 1} + b ^l\tag1\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(A^l = g^l(Z^l) = g^l(W^lA^{l - 1} + b ^l)\tag2\)&lt;/span&gt;
These computations will take place on each layer.&lt;/p&gt;

&lt;p&gt;&lt;h3 style=&#34;font-family: Georgia; font-size:1.3em;color:purple; font-style:bold&#34;&gt;
Parameters Initialization
&lt;/h3&gt;&lt;br&gt;
We&#39;ll first initialize the weight matrices and the bias vectors. It&#39;s important to note that we shouldn&#39;t initialize all the parameters to zero because doing so will lead the gradients to be equal and on each iteration the output would be the same and the learning algorithm won&#39;t learn anything. Therefore, it&#39;s important to randomly initialize the parameters to values between 0 and 1. It&#39;s also recommended to multiply the random values by small scalar such as 0.01 to make the activation units active and be on the regions where activation functions&#39; derivatives are not close to zero.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Initialize parameters
def initialize_parameters(layers_dims):
    np.random.seed(1)               
    parameters = {}
    L = len(layers_dims)            

    for l in range(1, L):           
        parameters[&amp;quot;W&amp;quot; + str(l)] = np.random.randn(
            layers_dims[l], layers_dims[l - 1]) * 0.01
        parameters[&amp;quot;b&amp;quot; + str(l)] = np.zeros((layers_dims[l], 1))

        assert parameters[&amp;quot;W&amp;quot; + str(l)].shape == (
            layers_dims[l], layers_dims[l - 1])
        assert parameters[&amp;quot;b&amp;quot; + str(l)].shape == (layers_dims[l], 1)

    return parameters
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3 style=&#34;font-family: Georgia; font-size:1.3em;color:purple; font-style:bold&#34;&gt;
Activation Functions
&lt;/h3&gt;&lt;br&gt;
There is no definitive guide for which activation function works best on specific problems. It&#39;s a trial and error process where one should try different set of functions and see which one works best on the problem at hand. We&#39;ll cover 4 of the most commonly used activation functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sigmoid function ($\sigma$)&lt;/strong&gt;: $g(z) = \frac{1}{1 + e^{-z}}$. It&#39;s recommended to be used only on the output layer so that we can easily interpret the output as probabilities since it has restricted output between 0 and 1. One of the main disadvantages for using sigmoid function on hidden layers is that the gradient is very close to zero over a large portion of its domain which makes it slow and harder for the learning algorithm to learn.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hyperbolic Tangent function&lt;/strong&gt;: $g(z) = \frac{e^z - e&lt;sup&gt;{-z}}{e&lt;/sup&gt;z + e^{-z}}$. It&#39;s superior to sigmoid function in which the mean of its output is very close to zero, which in other words center the output of the activation units around zero and make the range of values very small which means faster to learn. The disadvantage that it shares with sigmoid function is that the gradient is very small on good portion of the domain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rectified Linear Unit (ReLU)&lt;/strong&gt;: $g(z) = max(0, z)$. The models that are close to linear are easy to optimize. Since ReLU shares a lot of the properties of linear functions, it tends to work well on most of the problems. The only issue is that the derivative is not defined at $z = 0$, which we can overcome by assigning the derivative to 0 at $z = 0$. However, this means that for $z\leq 0$ the gradient is zero and again can&#39;t learn.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Leaky Rectified Linear Unit&lt;/strong&gt;: $g(z) = max(\alpha*z, z)$. It overcomes the zero gradient issue from ReLU and assigns $\alpha$ which is a small value for $z\leq 0$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&#39;re not sure which activation function to choose, start with ReLU.
Next, we&#39;ll implement the above activation functions and draw a graph for each one to make it easier to see the domain and range of each function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define activation functions that will be used in forward propagation
def sigmoid(Z):
    A = 1 / (1 + np.exp(-Z))
    return A, Z


def tanh(Z):
    A = np.tanh(Z)
    return A, Z


def relu(Z):
    A = np.maximum(0, Z)
    return A, Z


def leaky_relu(Z):
    A = np.maximum(0.1 * Z, Z)

    return A, Z
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Plot the 4 activation functions
z = np.linspace(-10, 10, 100)

# Computes post-activation outputs
A_sigmoid, z = sigmoid(z)
A_tanh, z = tanh(z)
A_relu, z = relu(z)
A_leaky_relu, z = leaky_relu(z)

# Plot sigmoid
plt.figure(figsize=(12, 8))
plt.subplot(2, 2, 1)
plt.plot(z, A_sigmoid, label = &amp;quot;Function&amp;quot;)
plt.plot(z, A_sigmoid * (1 - A_sigmoid), label = &amp;quot;Derivative&amp;quot;)
plt.legend(loc = &amp;quot;upper left&amp;quot;)
plt.xlabel(&amp;quot;z&amp;quot;)
plt.ylabel(r&amp;quot;$\frac{1}{1 + e^{-z}}$&amp;quot;)
plt.title(&amp;quot;Sigmoid Function&amp;quot;, fontsize = 16)
# Plot tanh
plt.subplot(2, 2, 2)
plt.plot(z, A_tanh, &#39;b&#39;, label = &amp;quot;Function&amp;quot;)
plt.plot(z, 1 - np.square(A_tanh), &#39;r&#39;,label = &amp;quot;Derivative&amp;quot;)
plt.legend(loc = &amp;quot;upper left&amp;quot;)
plt.xlabel(&amp;quot;z&amp;quot;)
plt.ylabel(r&amp;quot;$\frac{e^z - e^{-z}}{e^z + e^{-z}}$&amp;quot;)
plt.title(&amp;quot;Hyperbolic Tangent Function&amp;quot;, fontsize = 16)
# plot relu
plt.subplot(2, 2, 3)
plt.plot(z, A_relu, &#39;g&#39;)
plt.xlabel(&amp;quot;z&amp;quot;)
plt.ylabel(r&amp;quot;$max\{0, z\}$&amp;quot;)
plt.title(&amp;quot;ReLU Function&amp;quot;, fontsize = 16)
# plot leaky relu
plt.subplot(2, 2, 4)
plt.plot(z, A_leaky_relu, &#39;y&#39;)
plt.xlabel(&amp;quot;z&amp;quot;)
plt.ylabel(r&amp;quot;$max\{0.1z, z\}$&amp;quot;)
plt.title(&amp;quot;Leaky ReLU Function&amp;quot;, fontsize = 16)
plt.tight_layout();
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/activation_fns.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/activation_fns.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Activation functions and their derivatives.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;h3 style=&#34;font-family: Georgia; font-size:1.3em;color:purple; font-style:bold&#34;&gt;
Feed Forward
&lt;/h3&gt;&lt;br&gt;
Given its inputs from previous layer, each unit computes affine transformation $z = W^Tx + b$ and then apply an activation function $g(z)$ such as ReLU element-wise. During the process, we&#39;ll store (cache) all variables computed and used on each layer to be used in back-propagation. We&#39;ll write first two helper functions that will be used in the L-model forward propagation to make it easier to debug. Keep in mind that on each layer, we may have different activation function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define helper functions that will be used in L-model forward prop
def linear_forward(A_prev, W, b):
    Z = np.dot(W, A_prev) + b
    cache = (A_prev, W, b)

    return Z, cache


def linear_activation_forward(A_prev, W, b, activation_fn):
    assert activation_fn == &amp;quot;sigmoid&amp;quot; or activation_fn == &amp;quot;tanh&amp;quot; or \
        activation_fn == &amp;quot;relu&amp;quot;

    if activation_fn == &amp;quot;sigmoid&amp;quot;:
        Z, linear_cache = linear_forward(A_prev, W, b)
        A, activation_cache = sigmoid(Z)

    elif activation_fn == &amp;quot;tanh&amp;quot;:
        Z, linear_cache = linear_forward(A_prev, W, b)
        A, activation_cache = tanh(Z)

    elif activation_fn == &amp;quot;relu&amp;quot;:
        Z, linear_cache = linear_forward(A_prev, W, b)
        A, activation_cache = relu(Z)

    assert A.shape == (W.shape[0], A_prev.shape[1])

    cache = (linear_cache, activation_cache)

    return A, cache


def L_model_forward(X, parameters, hidden_layers_activation_fn=&amp;quot;relu&amp;quot;):
    A = X                           
    caches = []                     
    L = len(parameters) // 2        

    for l in range(1, L):
        A_prev = A
        A, cache = linear_activation_forward(
            A_prev, parameters[&amp;quot;W&amp;quot; + str(l)], parameters[&amp;quot;b&amp;quot; + str(l)],
            activation_fn=hidden_layers_activation_fn)
        caches.append(cache)

    AL, cache = linear_activation_forward(
        A, parameters[&amp;quot;W&amp;quot; + str(L)], parameters[&amp;quot;b&amp;quot; + str(L)],
        activation_fn=&amp;quot;sigmoid&amp;quot;)
    caches.append(cache)

    assert AL.shape == (1, X.shape[1])

    return AL, caches
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3 style=&#34;font-family: Georgia; font-size:1.3em;color:purple; font-style:bold&#34;&gt;
Cost
&lt;/h3&gt;&lt;br&gt;
We&#39;ll use the binary &lt;strong&gt;Cross-Entropy&lt;/strong&gt; cost. It uses the log-likelihood method to estimate its error. The cost is:
&lt;span  class=&#34;math&#34;&gt;\(J(W, b) = -\frac{1}{m}\sum_{i = 1}^m\big(y^ilog(\widehat{y^i}) + (1 - y^i)log(1 - \widehat{y^i}\big)\tag3\)&lt;/span&gt;
The above cost function is convex; however, neural network usually stuck on a local minimum and is not guaranteed to find the optimal parameters. We&#39;ll use here gradient-based learning.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Compute cross-entropy cost
def compute_cost(AL, y):
    m = y.shape[1]              
    cost = - (1 / m) * np.sum(
        np.multiply(y, np.log(AL)) + np.multiply(1 - y, np.log(1 - AL)))

    return cost
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:1.5em;color:purple; font-style:bold&#34;&gt;
Back-Propagation
&lt;/h2&gt;

&lt;p&gt;Allows the information to go back from the cost backward through the network in order to compute the gradient. Therefore, loop over the nodes starting at the final node in reverse topological order to compute the derivative of the final node output with respect to each edge&#39;s node tail. Doing so will help us know who is responsible for the most error and change the parameters in that direction. The following derivatives&#39; formulas will help us write the back-propagate functions:
&lt;span  class=&#34;math&#34;&gt;\(dA^L = \frac{A^L - Y}{A^L(1 - A^L)}\tag4\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(dZ^L = A^L - Y\tag5\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(dW^l = \frac{1}{m}dZ^l{A^{l - 1}}^T\tag6\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(db^l = \frac{1}{m}\sum_i(dZ^l)\tag7\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(dA^{l - 1} = {W^l}^TdZ^l\tag8\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(dZ^{l} = dA^l*g^{&#39;l}(Z^l)\tag9\)&lt;/span&gt;
Since $b^l$ is always a vector, the sum would be across rows (since each column is an example).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define derivative of activation functions w.r.t z that will be used in back-propagation
def sigmoid_gradient(dA, Z):
    A, Z = sigmoid(Z)
    dZ = dA * A * (1 - A)

    return dZ


def tanh_gradient(dA, Z):
    A, Z = tanh(Z)
    dZ = dA * (1 - np.square(A))

    return dZ


def relu_gradient(dA, Z):
    A, Z = relu(Z)
    dZ = np.multiply(dA, np.int64(A &amp;gt; 0))

    return dZ


# define helper functions that will be used in L-model back-prop
def linear_backword(dZ, cache):
    A_prev, W, b = cache
    m = A_prev.shape[1]

    dW = (1 / m) * np.dot(dZ, A_prev.T)
    db = (1 / m) * np.sum(dZ, axis=1, keepdims=True)
    dA_prev = np.dot(W.T, dZ)

    assert dA_prev.shape == A_prev.shape
    assert dW.shape == W.shape
    assert db.shape == b.shape

    return dA_prev, dW, db


def linear_activation_backward(dA, cache, activation_fn):
    linear_cache, activation_cache = cache

    if activation_fn == &amp;quot;sigmoid&amp;quot;:
        dZ = sigmoid_gradient(dA, activation_cache)
        dA_prev, dW, db = linear_backword(dZ, linear_cache)

    elif activation_fn == &amp;quot;tanh&amp;quot;:
        dZ = tanh_gradient(dA, activation_cache)
        dA_prev, dW, db = linear_backword(dZ, linear_cache)

    elif activation_fn == &amp;quot;relu&amp;quot;:
        dZ = relu_gradient(dA, activation_cache)
        dA_prev, dW, db = linear_backword(dZ, linear_cache)

    return dA_prev, dW, db


def L_model_backward(AL, y, caches, hidden_layers_activation_fn=&amp;quot;relu&amp;quot;):
    y = y.reshape(AL.shape)
    L = len(caches)
    grads = {}

    dAL = np.divide(AL - y, np.multiply(AL, 1 - AL))

    grads[&amp;quot;dA&amp;quot; + str(L - 1)], grads[&amp;quot;dW&amp;quot; + str(L)], grads[
        &amp;quot;db&amp;quot; + str(L)] = linear_activation_backward(
            dAL, caches[L - 1], &amp;quot;sigmoid&amp;quot;)

    for l in range(L - 1, 0, -1):
        current_cache = caches[l - 1]
        grads[&amp;quot;dA&amp;quot; + str(l - 1)], grads[&amp;quot;dW&amp;quot; + str(l)], grads[
            &amp;quot;db&amp;quot; + str(l)] = linear_activation_backward(
                grads[&amp;quot;dA&amp;quot; + str(l)], current_cache,
                hidden_layers_activation_fn)

    return grads


# define the function to update both weight matrices and bias vectors
def update_parameters(parameters, grads, learning_rate):
    L = len(parameters) // 2

    for l in range(1, L + 1):
        parameters[&amp;quot;W&amp;quot; + str(l)] = parameters[
            &amp;quot;W&amp;quot; + str(l)] - learning_rate * grads[&amp;quot;dW&amp;quot; + str(l)]
        parameters[&amp;quot;b&amp;quot; + str(l)] = parameters[
            &amp;quot;b&amp;quot; + str(l)] - learning_rate * grads[&amp;quot;db&amp;quot; + str(l)]

    return parameters
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;Application&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
II. Application
&lt;/h2&gt;

&lt;p&gt;The dataset that we&#39;ll be working on has 209 images. Each image is 64 x 64 pixels on RGB scale. We&#39;ll build a neural network to classify if the image has a cat or not. Therefore, $y^i \in {0, 1}.$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We&#39;ll first load the images.&lt;/li&gt;
&lt;li&gt;Show sample image for a cat.&lt;/li&gt;
&lt;li&gt;Reshape input matrix so that each column would be one example. Also, since each image is 64 x 64 x 3, we&#39;ll end up having 12,288 features for each image. Therefore, the input matrix would be 12,288 x 209.&lt;/li&gt;
&lt;li&gt;Standardize the data so that the gradients don&#39;t go out of control. Also, it will help hidden units have similar range of values. For now, we&#39;ll divide every pixel by 255 which shouldn&#39;t be an issue. However, it&#39;s better to standardize the data to have a mean of 0 and a standard deviation of 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import training dataset
train_dataset = h5py.File(&amp;quot;../data/train_catvnoncat.h5&amp;quot;)
X_train = np.array(train_dataset[&amp;quot;train_set_x&amp;quot;])
y_train = np.array(train_dataset[&amp;quot;train_set_y&amp;quot;])

test_dataset = h5py.File(&amp;quot;../data/test_catvnoncat.h5&amp;quot;)
X_test = np.array(test_dataset[&amp;quot;test_set_x&amp;quot;])
y_test = np.array(test_dataset[&amp;quot;test_set_y&amp;quot;])

# print the shape of input data and label vector
print(f&amp;quot;&amp;quot;&amp;quot;Original dimensions:\n{20 * &#39;-&#39;}\nTraining: {X_train.shape}, {y_train.shape}
Test: {X_test.shape}, {y_test.shape}&amp;quot;&amp;quot;&amp;quot;)

# plot cat image
plt.figure(figsize=(6, 6))
plt.imshow(X_train[50])
plt.axis(&amp;quot;off&amp;quot;);

# Transform input data and label vector
X_train = X_train.reshape(209, -1).T
y_train = y_train.reshape(-1, 209)

X_test = X_test.reshape(50, -1).T
y_test = y_test.reshape(-1, 50)

# standarize the data
X_train = X_train / 255
X_test = X_test / 255

print(f&amp;quot;&amp;quot;&amp;quot;\nNew dimensions:\n{15 * &#39;-&#39;}\nTraining: {X_train.shape}, {y_train.shape}
Test: {X_test.shape}, {y_test.shape}&amp;quot;&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Original dimensions:
--------------------
Training: (209, 64, 64, 3), (209,)
Test: (50, 64, 64, 3), (50,)

New dimensions:
---------------
Training: (12288, 209), (1, 209)
Test: (12288, 50), (1, 50)
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/cat_sample.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/cat_sample.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Sample image.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Now, our dataset is ready to be used and test our neural network implementation. Let&#39;s first write &lt;strong&gt;multi-layer model&lt;/strong&gt; function to implement gradient-based learning using predefined number of iterations and learning rate.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define the multi-layer model using all the helper functions we wrote before
def L_layer_model(
        X, y, layers_dims, learning_rate=0.01, num_iterations=3000,
        print_cost=True, hidden_layers_activation_fn=&amp;quot;relu&amp;quot;):
    np.random.seed(1)

    # initialize parameters
    parameters = initialize_parameters(layers_dims)

    # intialize cost list
    cost_list = []

    # iterate over num_iterations
    for i in range(num_iterations):
        # iterate over L-layers to get the final output and the cache
        AL, caches = L_model_forward(
            X, parameters, hidden_layers_activation_fn)

        # compute cost to plot it
        cost = compute_cost(AL, y)

        # iterate over L-layers backward to get gradients
        grads = L_model_backward(AL, y, caches, hidden_layers_activation_fn)

        # update parameters
        parameters = update_parameters(parameters, grads, learning_rate)

        # append each 100th cost to the cost list
        if (i + 1) % 100 == 0 and print_cost:
            print(f&amp;quot;The cost after {i + 1} iterations is: {cost:.4f}&amp;quot;)

        if i % 100 == 0:
            cost_list.append(cost)

    # plot the cost curve
    plt.figure(figsize=(10, 6))
    plt.plot(cost_list)
    plt.xlabel(&amp;quot;Iterations (per hundreds)&amp;quot;)
    plt.ylabel(&amp;quot;Loss&amp;quot;)
    plt.title(f&amp;quot;Loss curve for the learning rate = {learning_rate}&amp;quot;)

    return parameters


def accuracy(X, parameters, y, activation_fn=&amp;quot;relu&amp;quot;):
    probs, caches = L_model_forward(X, parameters, activation_fn)
    labels = (probs &amp;gt;= 0.5) * 1
    accuracy = np.mean(labels == y) * 100

    return f&amp;quot;The accuracy rate is: {accuracy:.2f}%.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we&#39;ll train two versions of the neural network where each one will use different activation function on hidden layers: One will use rectified linear unit (&lt;strong&gt;ReLU&lt;/strong&gt;) and the second one will use hyperbolic tangent function (&lt;strong&gt;tanh&lt;/strong&gt;). Finally we&#39;ll use the parameters we get from both neural networks to classify training examples and compute the training accuracy rates for each version to see which activation function works best on this problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Setting layers dims
layers_dims = [X_train.shape[0], 5, 5, 1]

# NN with tanh activation fn
parameters_tanh = L_layer_model(
    X_train, y_train, layers_dims, learning_rate=0.03, num_iterations=3000,
    hidden_layers_activation_fn=&amp;quot;tanh&amp;quot;)

# Print the accuracy
accuracy(X_test, parameters_tanh, y_test, activation_fn=&amp;quot;tanh&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations is: 0.6556
The cost after 200 iterations is: 0.6468
The cost after 300 iterations is: 0.6447
The cost after 400 iterations is: 0.6441
The cost after 500 iterations is: 0.6440
The cost after 600 iterations is: 0.6440
The cost after 700 iterations is: 0.6440
The cost after 800 iterations is: 0.6439
The cost after 900 iterations is: 0.6439
The cost after 1000 iterations is: 0.6439
The cost after 1100 iterations is: 0.6439
The cost after 1200 iterations is: 0.6439
The cost after 1300 iterations is: 0.6438
The cost after 1400 iterations is: 0.6438
The cost after 1500 iterations is: 0.6437
The cost after 1600 iterations is: 0.6434
The cost after 1700 iterations is: 0.6429
The cost after 1800 iterations is: 0.6413
The cost after 1900 iterations is: 0.6361
The cost after 2000 iterations is: 0.6124
The cost after 2100 iterations is: 0.5112
The cost after 2200 iterations is: 0.5288
The cost after 2300 iterations is: 0.4312
The cost after 2400 iterations is: 0.3821
The cost after 2500 iterations is: 0.3387
The cost after 2600 iterations is: 0.2349
The cost after 2700 iterations is: 0.2206
The cost after 2800 iterations is: 0.1927
The cost after 2900 iterations is: 0.4669
The cost after 3000 iterations is: 0.1040

&#39;The accuracy rate is: 68.00%.&#39;
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/loss_tanh.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/loss_tanh.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Loss curve with tanh activation function.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# NN with relu activation fn
parameters_relu = L_layer_model(
    X_train, y_train, layers_dims, learning_rate=0.03, num_iterations=3000,
    hidden_layers_activation_fn=&amp;quot;relu&amp;quot;)

# Print the accuracy
accuracy(X_test, parameters_relu, y_test, activation_fn=&amp;quot;relu&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The cost after 100 iterations is: 0.6556
The cost after 200 iterations is: 0.6468
The cost after 300 iterations is: 0.6447
The cost after 400 iterations is: 0.6441
The cost after 500 iterations is: 0.6440
The cost after 600 iterations is: 0.6440
The cost after 700 iterations is: 0.6440
The cost after 800 iterations is: 0.6440
The cost after 900 iterations is: 0.6440
The cost after 1000 iterations is: 0.6440
The cost after 1100 iterations is: 0.6439
The cost after 1200 iterations is: 0.6439
The cost after 1300 iterations is: 0.6439
The cost after 1400 iterations is: 0.6439
The cost after 1500 iterations is: 0.6439
The cost after 1600 iterations is: 0.6439
The cost after 1700 iterations is: 0.6438
The cost after 1800 iterations is: 0.6437
The cost after 1900 iterations is: 0.6435
The cost after 2000 iterations is: 0.6432
The cost after 2100 iterations is: 0.6423
The cost after 2200 iterations is: 0.6395
The cost after 2300 iterations is: 0.6259
The cost after 2400 iterations is: 0.5408
The cost after 2500 iterations is: 0.5262
The cost after 2600 iterations is: 0.4727
The cost after 2700 iterations is: 0.4386
The cost after 2800 iterations is: 0.3493
The cost after 2900 iterations is: 0.1877
The cost after 3000 iterations is: 0.3641

&#39;The accuracy rate is: 42.00%.&#39;
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/loss_relu.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/coding-nn-from-scratch/loss_relu.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Loss curve with ReLU activation function.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Please note that the accuracy rates above are expected to overestimate the generalization accuracy rates.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Conclusion
&lt;/h2&gt;

&lt;p&gt;The purpose of this post is to code Deep Neural Network step-by-step and explain the important concepts while doing that. We don&#39;t really care about the accuracy rate at this moment since there are tons of things we could&#39;ve done to increase the accuracy which would be the subject of following posts. Below are some takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even if neural network can represent any function, it may fail to learn for two reasons:

&lt;ol&gt;
&lt;li&gt;The optimization algorithm may fail to find the best value for the parameters of the desired (true) function.
It can stuck in a local optimum.&lt;/li&gt;
&lt;li&gt;The learning algorithm may find different functional form that is different than the intended function due to overfitting.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Even if neural network rarely converges and always stuck in a local minimum, it is still able to reduce the cost significantly and come up with very complex models with high test accuracy.&lt;/li&gt;
&lt;li&gt;The neural network we used in this post is standard fully connected network. However, there are two other kinds of networks:

&lt;ul&gt;
&lt;li&gt;Convolutional NN: Where not all nodes are connected. It&#39;s best in class for image recognition.&lt;/li&gt;
&lt;li&gt;Recurrent NN: There is a feedback connections where output of the model is fed back into itself. It&#39;s used mainly in sequence modeling.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The fully connected neural network also forgets what happened in previous steps and also doesn&#39;t know anything about the output.&lt;/li&gt;
&lt;li&gt;There are number of hyperparameters that we can tune using cross validation to get the best performance of our network:

&lt;ol&gt;
&lt;li&gt;Learning rate ($\alpha$): Determines how big the step for each update of parameters.

&lt;ul&gt;
&lt;li&gt;Small $\alpha$ leads to slow convergence and may become computationally very expensive.&lt;/li&gt;
&lt;li&gt;Large $\alpha$ may lead to overshooting where our learning algorithm may never converge.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Number of hidden layers (depth): The more hidden layers the better, but comes at a cost computationally.&lt;/li&gt;
&lt;li&gt;Number of units per hidden layer (width): Research proven that huge number of hidden units per layer doesn&#39;t add to the improvement of the network.&lt;/li&gt;
&lt;li&gt;Activation function: Which function to use on hidden layers differs among applications and domains. It&#39;s a trial and error process to try different functions and see which one works best.&lt;/li&gt;
&lt;li&gt;Number of iterations.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Standardize data would help activation units have similar range of values and avoid gradients to go out of control.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Character-level Language Model</title>
      <link>https://imaddabbura.github.io/post/character-level-language-model/</link>
      <pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://imaddabbura.github.io/post/character-level-language-model/</guid>
      <description>&lt;!-- 


  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/character-level-language-model/text_sample.jpg&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/character-level-language-model/text_sample.jpg&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Iphone&amp;rsquo;s text suggestion.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
 --&gt;

&lt;p&gt;Have you ever wondered how Gmail automatic reply works? Or how your phone suggests next word when texting? Or even how a Neural Network can generate musical notes? The general way of generating a sequence of text is to train a model to predict the next word/character given all previous words/characters. Such model is called a &lt;strong&gt;Statistical Language Model&lt;/strong&gt;. What is a statistical language model? A statistical language model tries to capture the statistical structure (latent space) of training text it&#39;s trained on. Usually &lt;strong&gt;Recurrent Neural Network (RNN)&lt;/strong&gt; models family are used to train the model due to the fact that they are very powerful and expressive in which they remember and process past information through their high dimensional hidden state units. The main goal of any language model is to learn the joint probability distribution of sequences of characters/words in a training text, i.e. trying to learn the joint probability function. For example, if we&#39;re trying to predict a sequence of $T$ words, we try to get the joint probability $P(w_1, w_2, ..., w_T)$ as big as we can which is equal to the product of all conditional probabilities $\prod_{t = 1}^T P(w_t/w_{t-1})$ at all time steps (t).&lt;/p&gt;

&lt;p&gt;In this post, we&#39;ll cover the &lt;strong&gt;Character-Level Language Model&lt;/strong&gt; where almost all the concepts hold for any other language models such as word-language models. The main task of the character-level language model is to predict the next character given all previous characters in a sequence of data, i.e. generates text character by character. More formally, given a training sequence $(x^1, ... , x^T)$, the RNN uses the sequence of its output vectors $(o^1, ... , o^T)$ to obtain a sequence of predictive distributions $P(x&lt;sup&gt;t/x&lt;/sup&gt;{t-1}) = softmax(o^t)$.&lt;/p&gt;

&lt;p&gt;Let&#39;s illustrate how the character-level language model works using my first name (&amp;quot;imad&amp;quot;) as an example (see figure 1 for all the details of this example).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We first build a vocabulary dictionary using all the unique letters of the names in the corpus as keys and the index of each letter starting from zero (since Python is a zero-indexed language) in an ascending order. For our example, the vocabulary dictionary would be: {&amp;quot;a&amp;quot;: 0, &amp;quot;d&amp;quot;: 1, &amp;quot;i&amp;quot;: 2, &amp;quot;m&amp;quot;: 3}. Therefore, &amp;quot;imad&amp;quot; would become a list of the following integers: [2, 3, 0, 1].&lt;/li&gt;
&lt;li&gt;Convert the input and the output characters to lists of integers using the vocabulary dictionary. In this post, we&#39;ll assume that $x^1 = \vec{0}$ for all examples. Therefore, $y = &amp;quot;imad&amp;quot;$ and $x = \vec{0}\ + &amp;quot;ima&amp;quot;$. In other words, $x^{t + 1} = y^t$ which gives us: $y = [2, 3, 0, 1]$ and $x = [\vec{0}, 2, 3, 0]$.&lt;/li&gt;
&lt;li&gt;For each character in the input:

&lt;ol&gt;
&lt;li&gt;Convert the input characters into one-hot vectors. Notice how the first character $x^1 = \vec{0}$.&lt;/li&gt;
&lt;li&gt;Compute the hidden state layer.&lt;/li&gt;
&lt;li&gt;Compute the output layer and then pass it through softmax to get the results as probabilities.&lt;/li&gt;
&lt;li&gt;Feed the target character at time step (t) as the input character at time step $(t + 1)$.&lt;/li&gt;
&lt;li&gt;Go back to step A and repeat until we finish all the letters in the name.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The objective is to make the green numbers as big as we can and the red numbers as small as we can in the probability distribution layer. The reason is that the true index should have the highest probability by making it as close as we can to 1. The way to do that is to measure the loss using cross-entropy and then compute the gradients of the loss w.r.t. all parameters to update them in the opposite of the gradient direction. Repeating the process over many times where each time we adjust the parameters based on the gradient direction --&amp;gt; model will be able to correctly predict next characters given all previous ones using all names in the training text. Notice that hidden state $h^4$ has all past information about all characters.&lt;/p&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/character-level-language-model/char_level_example.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/character-level-language-model/char_level_example.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Illustrative example of character-level language model using RNN.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: To shorten the length of the post, I deleted all the docstrings of python functions and I didn&#39;t include some functions that i didn&#39;t think are necessary to understand the main concepts. The notebook and the script that created this post can be found &lt;a href=&#34;https://nbviewer.jupyter.org/github/ImadDabbura/blog-posts/blob/master/notebooks/Character-LeveL-Language-Model.ipynb&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/ImadDabbura/blog-posts/blob/master/scripts/character_level_language_model.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Training&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://deron.meranda.us/data/census-derived-all-first.txt&#34;&gt;dataset&lt;/a&gt; we&#39;ll be using has 5,163 names: 4,275 male names, 1,219 female names, and 331 names that can be both female and male names. The RNN architecture we&#39;ll be using to train the character-level language model is called &lt;strong&gt;many to many&lt;/strong&gt; where time steps of the input $(T_x)$ = time steps of the output $(T_y)$. In other words, the sequence of the input and output are synced (see figure 2).&lt;/p&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/character-level-language-model/rnn_architecture.PNG&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/character-level-language-model/rnn_architecture.PNG&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;RNN architecture: many to many.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;The character-level language model will be trained on names; which means after we&#39;re done with training the model, we&#39;ll be able to generate some interesting names :).&lt;/p&gt;

&lt;p&gt;In this section, we&#39;ll go over four main parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#fwd_prop&#34;&gt;Forward propagation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bckwrd_prop&#34;&gt;Backpropagation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sampling&#34;&gt;Sampling&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#train&#34;&gt;Fitting the model&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&#39;fwd_prop&#39;&gt;&lt;/a&gt;
&lt;h3 style=&#34;font-family: Georgia; font-size:1.5em;color:purple; font-style:bold&#34;&gt;
Forward Propagation&lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;We&#39;ll be using Stochastic Gradient Descent (SGD) where each batch consists of only one example. In other words, the RNN model will learn from each example (name) separately, i.e. run both forward and backward passes on each example and update parameters accordingly. Below are all the steps needed for a forward pass:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a vocabulary dictionary using the unique lower case letters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a character to index dictionary that maps each character to its corresponding index in an ascending order. For example, &amp;quot;a&amp;quot; would have index 1 (since python is a zero index language and we&#39;ll reserve 0 index to EOS &amp;quot;\n&amp;quot;) and &amp;quot;z&amp;quot; would have index 26. We will use this dictionary in converting names into lists of integers where each letter will be represented as one-hot vector.&lt;/li&gt;
&lt;li&gt;Create an index to character dictionary that maps indices to characters. This dictionary will be used to convert the output of the RNN model into characters which will be translated into names.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Initialize parameters: weights will be initialized to small random numbers from standard normal distribution to break symmetry and make sure different hidden units learn different things. On the other hand, biases will be initialized to zeros.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$W_{hh}$: weight matrix connecting previous hidden state $h^{t - 1}$ to current hidden state $h^t$.&lt;/li&gt;
&lt;li&gt;$W_{xh}$: weight matrix connecting input $x^t$ to hidden state $h^t$.&lt;/li&gt;
&lt;li&gt;$b$: hidden state bias vector.&lt;/li&gt;
&lt;li&gt;$W_{hy}$: weight matrix connecting hidden state $h^t$ to output $o^t$.&lt;/li&gt;
&lt;li&gt;$c$: output bias vector.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Convert input $x^t$ and output $y^t$ into one-hot vector each. The dimension of the one-hot vector is vocab_size x 1. Everything will be zero except for the index of the letter at (t) would be 1. In our case, $x^t$ would be the same as $y^t$ shifted to the left where $x^1 = \vec{0}$; however, starting from $t = 2$, $x^{t + 1} = y^{t}$. For example, if we use &amp;quot;imad&amp;quot; as the input, then $y = [3, 4, 1, 2, 0]$ while $x = [\vec{0}, 3, 4, 1, 2]$. Notice that $x^1 = \vec{0}$ and not the index 0. Moreover, we&#39;re using &amp;quot;\n&amp;quot; as EOS (end of sentence/name) for each name so that the RNN learns &amp;quot;\n&amp;quot; as any other character. This will help the network learn when to to stop generating characters. Therefore, the last target character for all names will be &amp;quot;\n&amp;quot; that represents the end of the name.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compute the hidden state using the following formula:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(h^t = tanh(W_{hh}h^{t - 1} + W_{xh}x^t + b)\tag{1}\)&lt;/span&gt;
Notice that we use hyperbolic tangent $(\frac{e^x - e&lt;sup&gt;{-x}}{e&lt;/sup&gt;x + e^{-x}})$ as the non-linear function. One of the main advantages of the hyperbolic tangent function is that it resembles the identity function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compute the output layer using the following formula:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[o^t = W_{hy}h^{t} + c \tag{2}\]&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pass the output through softmax layer to normalize the output that allows us to express it as a probability, i.e. all output will be between 0 and 1 and sum up to 1. Below is the softmax formula:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(\widehat{y^t} = \frac{e^{o^t}}{\sum_ie^{o_i^t}}\tag{3}\)&lt;/span&gt;
The softmax layer has the same dimension as the output layer which is vocab_size x 1. As a result, $y^t[i]$ is the probability of index $i$ being the next character at time step (t).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As mentioned before, the objective of a character-level language model is to minimize the negative log-likelihood of the training sequence. Therefore, the loss function at time step (t) and the total loss across all time steps are:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\mathcal{L}^t = -\sum_{i = 1}^{T_y}y^tlog\widehat{y^t}\tag{4}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(\mathcal{L} = \sum_{t = 1}^{T_y}\mathcal{L}^t(\widehat{y^t}, y^t)\tag{5}\)&lt;/span&gt;
Since we&#39;ll be using SGD, the loss will be noisy and have many oscillations, so it&#39;s a good practice to smooth out the loss using exponential weighted average.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pass the target character $y^t$ as the next input $x^{t + 1}$ until we finish the sequence.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load packages
import os

import numpy as np

os.chdir(&amp;quot;../scripts/&amp;quot;)
from character_level_language_model import (initialize_parameters,
                                            initialize_rmsprop,
                                            softmax,
                                            smooth_loss,
                                            update_parameters_with_rmsprop)


def rnn_forward(x, y, h_prev, parameters):
    &amp;quot;&amp;quot;&amp;quot;Implement one Forward pass on one name.&amp;quot;&amp;quot;&amp;quot;
    # Retrieve parameters
    Wxh, Whh, b = parameters[&amp;quot;Wxh&amp;quot;], parameters[&amp;quot;Whh&amp;quot;], parameters[&amp;quot;b&amp;quot;]
    Why, c = parameters[&amp;quot;Why&amp;quot;], parameters[&amp;quot;c&amp;quot;]

    # Initialize inputs, hidden state, output, and probabilities dictionaries
    xs, hs, os, probs = {}, {}, {}, {}

    # Initialize x0 to zero vector
    xs[0] = np.zeros((vocab_size, 1))

    # Initialize loss and assigns h_prev to last hidden state in hs
    loss = 0
    hs[-1] = np.copy(h_prev)

    # Forward pass: loop over all characters of the name
    for t in range(len(x)):
        # Convert to one-hot vector
        if t &amp;gt; 0:
            xs[t] = np.zeros((vocab_size, 1))
            xs[t][x[t]] = 1
        # Hidden state
        hs[t] = np.tanh(np.dot(Wxh, xs[t]) + np.dot(Whh, hs[t - 1]) + b)
        # Logits
        os[t] = np.dot(Why, hs[t]) + c
        # Probs
        probs[t] = softmax(os[t])
        # Loss
        loss -= np.log(probs[t][y[t], 0])

    cache = (xs, hs, probs)

    return loss, cache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#39;bckwrd_prop&#39;&gt;&lt;/a&gt;
&lt;h3 style=&#34;font-family: Georgia; font-size:1.5em;color:purple; font-style:bold&#34;&gt;
Backpropagation&lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;With RNN based models, the gradient-based technique that will be used is called &lt;strong&gt;Backpropagation Through Time (BPTT)&lt;/strong&gt;. We start at last time step $T$ and backpropagate loss function w.r.t. all parameters across all time steps and sum them up (see figure 4).&lt;/p&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/character-level-language-model/backprop.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/character-level-language-model/backprop.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Backpropagation Through Time (BPTT).&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;In addition, since RNNs are known to have steep cliffs (sudden steep decrease in $\mathcal{L}$), gradients may overshoot the minimum and undo a lot of the work that was done even if we are using adaptive learning methods such as RMSProp. The reason is because gradient is a linear approximation of the loss function and may not capture information further than the point it was evaluated on such as the curvature of loss curve. Therefore, it&#39;s a common practice to clip the gradients to be in the interval . For this exercise, we&#39;ll clip the gradients to be in the interval . That means if the gradient is &amp;gt; 5 or &amp;lt; -5, it would be clipped to 5 and -5 respectively. Below are all the formulas needed to compute the gradients w.r.t. all parameters at all time steps.&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(\nabla_{o^t}\mathcal{L} = \widehat{y^t} - y^t\tag{6}\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\nabla_{W_{hy}}\mathcal{L} = \sum_t \nabla_{o^t}\mathcal{L} . {h^t}^T\tag{7}\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\nabla_{c}\mathcal{L} = \sum_t \nabla_{o^t}\mathcal{L} \tag{8}\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\nabla_{h^t}\mathcal{L} = W_{hy}^T . \nabla_{o^t}\mathcal{L} + \underbrace { W_{hh}^T . \nabla_{h^{t + 1}}\mathcal{L} * (1 - tanh(W_{hh}h^{t} + W_{xh}x^{t + 1} + b) ^ 2)}_{dh_{next}} \tag{9}\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\nabla_{h^{t - 1}}\mathcal{L} = W_{hh}^T . \nabla_{h^t}\mathcal{L} * (1 - tanh(h^t) ^ 2)\tag{10}\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\nabla_{x^t}\mathcal{L} = W_{xh}^T . \nabla_{h^t}\mathcal{L} * (1 - tanh(W_{hh}h^{t-1} + W_{xh}x^t + b) ^ 2)\tag{11}\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\nabla_{W_{hh}}\mathcal{L} = \sum_t \nabla_{h^t}\mathcal{L} * (1 - tanh(W_{hh}h^{t-1} + W_{xh}x^t + b) ^ 2) . {h^{t - 1}}^T\tag{12}\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\nabla_{W_{xh}}\mathcal{L} = \sum_t \nabla_{h^t}\mathcal{L} * (1 - tanh(W_{hh}h^{t-1} + W_{xh}x^t + b) ^ 2) . {x^t}^T\tag{13}\)&lt;/span&gt;
&lt;span  class=&#34;math&#34;&gt;\(\nabla_{b}\mathcal{L} = \sum_t \nabla_{h^t}\mathcal{L} * (1 - tanh(h^t) ^ 2) \tag{14}\)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Note that at last time step $T$, we&#39;ll initialize $dh_{next}$  to zeros since we can&#39;t get values from future. To stabilize the update at each time step since SGD may have so many oscillations, we&#39;ll be using one of the adaptive learning method optimizers. More specifically, we&#39;ll use &lt;a href=&#34;https://nbviewer.jupyter.org/github/ImadDabbura/Deep-Learning/blob/master/notebooks/Optimization-Algorithms.ipynb&#34;&gt;Root Mean Squared Propagation (RMSProp)&lt;/a&gt; which tends to have acceptable performance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def clip_gradients(gradients, max_value):
    &amp;quot;&amp;quot;&amp;quot;
    Implements gradient clipping element-wise on gradients to be between the
    interval [-max_value, max_value].
    &amp;quot;&amp;quot;&amp;quot;
    for grad in gradients.keys():
        np.clip(gradients[grad], -max_value, max_value, out=gradients[grad])

    return gradients


def rnn_backward(y, parameters, cache):
    &amp;quot;&amp;quot;&amp;quot;
    Implements Backpropagation on one name.
    &amp;quot;&amp;quot;&amp;quot;
    # Retrieve xs, hs, and probs
    xs, hs, probs = cache

    # Initialize all gradients to zero
    dh_next = np.zeros_like(hs[0])

    parameters_names = [&amp;quot;Whh&amp;quot;, &amp;quot;Wxh&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;Why&amp;quot;, &amp;quot;c&amp;quot;]
    grads = {}
    for param_name in parameters_names:
        grads[&amp;quot;d&amp;quot; + param_name] = np.zeros_like(parameters[param_name])

    # Iterate over all time steps in reverse order starting from Tx
    for t in reversed(range(len(xs))):
        dy = np.copy(probs[t])
        dy[y[t]] -= 1
        grads[&amp;quot;dWhy&amp;quot;] += np.dot(dy, hs[t].T)
        grads[&amp;quot;dc&amp;quot;] += dy
        dh = np.dot(parameters[&amp;quot;Why&amp;quot;].T, dy) + dh_next
        dhraw = (1 - hs[t] ** 2) * dh
        grads[&amp;quot;dWhh&amp;quot;] += np.dot(dhraw, hs[t - 1].T)
        grads[&amp;quot;dWxh&amp;quot;] += np.dot(dhraw, xs[t].T)
        grads[&amp;quot;db&amp;quot;] += dhraw
        dh_next = np.dot(parameters[&amp;quot;Whh&amp;quot;].T, dhraw)
        # Clip the gradients using [-5, 5] as the interval
        grads = clip_gradients(grads, 5)
    
    # Get the last hidden state
    h_prev = hs[len(xs) - 1]

    return grads, h_prev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#39;sampling&#39;&gt;&lt;/a&gt;
&lt;h3 style=&#34;font-family: Georgia; font-size:1.5em;color:purple; font-style:bold&#34;&gt;
Sampling&lt;/h3&gt;&lt;br&gt;
Sampling is what makes the text generated by the RNN at each time step an interesting/creative text. On each time step (t), the RNN output the conditional probability distribution of the next character given all the previous characters, i.e. $P(c_t/c_1, c_2, ..., c_{t-1})$. Let&#39;s assume that we are at time step $t = 3$ and we&#39;re trying to predict the third character, the conditional probability distribution is: $P(c_3/c_1, c_2) = (0.2, 0.3, 0.4, 0.1)$. We&#39;ll have two extremes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Maximum entropy: the character will be picked randomly using uniform probability distribution; which means that all characters in the vocabulary dictionary are equally likely. Therefore, we&#39;ll end up with maximum randomness in picking the next character and the generated text will not be either meaningful or sound real.&lt;/li&gt;
&lt;li&gt;Minimum entropy: the character with the highest conditional probability will be picked on each time step. That means next character will be what the model estimates to be the right one based on the training text and learned parameters. As a result, the names generated will be both meaningful and sound real. However, it will also be repetitive and not as interesting since all the parameters were optimized to learn joint probability distribution in predicting the next character.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As we increase randomness, text will lose local structure; however, as we decrease randomness, the generated text will sound more real and start to preserve its local structure. For this exercise, we will sample from the distribution that&#39;s generated by the model which can be seen as an intermediate level of randomness between maximum and minimum entropy (see figure 5). Using this sampling strategy on the above distribution, the index 0 has $20$% probability of being picked, while index 2 has $40$% probability to be picked.&lt;/p&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/character-level-language-model/sampling.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/character-level-language-model/sampling.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Sampling: An example of predicting next character using character-level language model.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;Therefore, sampling will be used at test time to generate names character by character.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sample(parameters, idx_to_chars, chars_to_idx, n):
    &amp;quot;&amp;quot;&amp;quot;
    Implements sampling of a squence of n characters characters length. The
    sampling will be based on the probability distribution output of RNN.
    &amp;quot;&amp;quot;&amp;quot;
    # Retrienve parameters, shapes, and vocab size
    Whh, Wxh, b = parameters[&amp;quot;Whh&amp;quot;], parameters[&amp;quot;Wxh&amp;quot;], parameters[&amp;quot;b&amp;quot;]
    Why, c = parameters[&amp;quot;Why&amp;quot;], parameters[&amp;quot;c&amp;quot;]
    n_h, n_x = Wxh.shape
    vocab_size = c.shape[0]

    # Initialize a0 and x1 to zero vectors
    h_prev = np.zeros((n_h, 1))
    x = np.zeros((n_x, 1))

    # Initialize empty sequence
    indices = []
    idx = -1
    counter = 0
    while (counter &amp;lt;= n and idx != chars_to_idx[&amp;quot;\n&amp;quot;]):
        # Fwd propagation
        h = np.tanh(np.dot(Whh, h_prev) + np.dot(Wxh, x) + b)
        o = np.dot(Why, h) + c
        probs = softmax(o)

        # Sample the index of the character using generated probs distribution
        idx = np.random.choice(vocab_size, p=probs.ravel())

        # Get the character of the sampled index
        char = idx_to_chars[idx]

        # Add the char to the sequence
        indices.append(idx)

        # Update a_prev and x
        h_prev = np.copy(h)
        x = np.zeros((n_x, 1))
        x[idx] = 1

        counter += 1
    sequence = &amp;quot;&amp;quot;.join([idx_to_chars[idx] for idx in indices if idx != 0])

    return sequence
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#39;train&#39;&gt;&lt;/a&gt;
&lt;h3 style=&#34;font-family: Georgia; font-size:1.5em;color:purple; font-style:bold&#34;&gt;
Fitting the model&lt;/h3&gt;&lt;br&gt;
After covering all the concepts/intuitions behind character-level language model, now we&#39;re ready to fit the model. We&#39;ll use the default settings for RMSProp&#39;s hyperparameters and run the model for 100 iterations. On each iteration, we&#39;ll print out one sampled name and smoothed loss to see how the names generated start to get more interesting with more iterations as well as the loss will start decreasing. When done with fitting the model, we&#39;ll plot the loss function and generate some names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def model(
        file_path, chars_to_idx, idx_to_chars, hidden_layer_size, vocab_size,
        num_epochs=10, learning_rate=0.01):
    &amp;quot;&amp;quot;&amp;quot;Implements RNN to generate characters.&amp;quot;&amp;quot;&amp;quot;
    # Get the data
    with open(file_path) as f:
        data = f.readlines()
    examples = [x.lower().strip() for x in data]

    # Initialize parameters
    parameters = initialize_parameters(vocab_size, hidden_layer_size)

    # Initialize Adam parameters
    s = initialize_rmsprop(parameters)

    # Initialize loss
    smoothed_loss = -np.log(1 / vocab_size) * 7

    # Initialize hidden state h0 and overall loss
    h_prev = np.zeros((hidden_layer_size, 1))
    overall_loss = []

    # Iterate over number of epochs
    for epoch in range(num_epochs):
        print(f&amp;quot;\033[1m\033[94mEpoch {epoch}&amp;quot;)
        print(f&amp;quot;\033[1m\033[92m=======&amp;quot;)

        # Sample one name
        print(f&amp;quot;&amp;quot;&amp;quot;Sampled name: {sample(parameters, idx_to_chars, chars_to_idx,
            10).capitalize()}&amp;quot;&amp;quot;&amp;quot;)
        print(f&amp;quot;Smoothed loss: {smoothed_loss:.4f}\n&amp;quot;)

        # Shuffle examples
        np.random.shuffle(examples)

        # Iterate over all examples (SGD)
        for example in examples:
            x = [None] + [chars_to_idx[char] for char in example]
            y = x[1:] + [chars_to_idx[&amp;quot;\n&amp;quot;]]
            # Fwd pass
            loss, cache = rnn_forward(x, y, h_prev, parameters)
            # Compute smooth loss
            smoothed_loss = smooth_loss(smoothed_loss, loss)
            # Bwd pass
            grads, h_prev = rnn_backward(y, parameters, cache)
            # Update parameters
            parameters, s = update_parameters_with_rmsprop(
                parameters, grads, s)

        overall_loss.append(smoothed_loss)

    return parameters, overall_loss
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load names
data = open(&amp;quot;../data/names.txt&amp;quot;, &amp;quot;r&amp;quot;).read()

# Convert characters to lower case
data = data.lower()

# Construct vocabulary using unique characters, sort it in ascending order,
# then construct two dictionaries that maps character to index and index to
# characters.
chars = list(sorted(set(data)))
chars_to_idx = {ch:i for i, ch in enumerate(chars)}
idx_to_chars = {i:ch for ch, i in chars_to_idx.items()}

# Get the size of the data and vocab size
data_size = len(data)
vocab_size = len(chars_to_idx)
print(f&amp;quot;There are {data_size} characters and {vocab_size} unique characters.&amp;quot;)

# Fitting the model
parameters, loss = model(&amp;quot;../data/names.txt&amp;quot;, chars_to_idx, idx_to_chars, 100, vocab_size, 100, 0.01)

# Plotting the loss
plt.plot(range(len(loss)), loss)
plt.xlabel(&amp;quot;Epochs&amp;quot;)
plt.ylabel(&amp;quot;Smoothed loss&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;There are 36121 characters and 27 unique characters.

Epoch 0
=======
Sampled name: Nijqikkgzst
Smoothed loss: 23.0709

Epoch 10
=======
Sampled name: Milton
Smoothed loss: 14.7446

Epoch 30
=======
Sampled name: Dangelyn
Smoothed loss: 13.8179

Epoch 70
=======
Sampled name: Lacira
Smoothed loss: 13.3782

Epoch 99
=======
Sampled name: Cathranda
Smoothed loss: 13.3380
&lt;/code&gt;&lt;/pre&gt;




  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/character-level-language-model/loss_plot.png&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/character-level-language-model/loss_plot.png&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Smoothed loss.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;p&gt;The names that were generated started to get more interesting after 15 epochs. I didn&#39;t include the results of all epochs to shorten the post; however, you can check the results in the &lt;a href=&#34;https://nbviewer.jupyter.org/github/ImadDabbura/blog-posts/blob/master/notebooks/Character-LeveL-Language-Model.ipynb&#34;&gt;notebook&lt;/a&gt; associated with this post. One of the interesting names is &amp;quot;Yasira&amp;quot; which is an Arabic name :).&lt;/p&gt;

&lt;p&gt;&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Conclusion&lt;/h2&gt;&lt;br&gt;
Statistical language models are very crucial in Natural Language Processing (NLP) such as speech recognition and machine translation. We demonstrated in this post the main concepts behind statistical language models using the character-level language model. The task of this model is to generate names character by character using names obtained from census data that were consisted of 5,163 names. Below are the main key takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we have more data, a bigger model, and train longer, we may get more interesting results. However, to get very interesting results, we should instead use &lt;strong&gt;Long Short-Term Memory (LSTM)&lt;/strong&gt; model with more than one layer deep. People have used 3 layers deep LSTM model with dropout and were able to generate very interesting results when applied on cookbooks and Shakespeare poems. LSTM models outperform simple RNN due to its ability in capturing longer time dependencies.&lt;/li&gt;
&lt;li&gt;With the sampling technique we&#39;re using, don&#39;t expect the RNN to generate meaningful sequence of characters (names).&lt;/li&gt;
&lt;li&gt;We used in this post each name as its own sequence; however, we may be able to speed up learning and get better results if we increase the batch size; let&#39;s say from one name to a sequence of 50 characters.&lt;/li&gt;
&lt;li&gt;We can control the level of randomness using the sampling strategy. Here, we balanced between what the model thinks it&#39;s the right character and the level of randomness.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gradient Descent Algorithm and Its Variants</title>
      <link>https://imaddabbura.github.io/post/gradient-descent-algorithm/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://imaddabbura.github.io/post/gradient-descent-algorithm/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Optimization&lt;/strong&gt; refers to the task of minimizing/maximizing an objective function &lt;em&gt;f(x)&lt;/em&gt; parameterized by &lt;em&gt;x&lt;/em&gt;. In machine/deep learning terminology, it&#39;s the task of minimizing the cost/loss function &lt;em&gt;J(w)&lt;/em&gt; parameterized by the model&#39;s parameters $w \in \mathbb{R}^d$. Optimization algorithms (in case of minimization) have one of the following goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find the global minimum of the objective function. This is feasible if the objective function is convex, i.e. any local minimum is a global minimum.&lt;/li&gt;
&lt;li&gt;Find the lowest possible value of the objective function within its neighborhood. That&#39;s usually the case if the objective function is not convex as the case in most deep learning problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are three kinds of optimization algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimization algorithm that is not iterative and simply solves for one point.&lt;/li&gt;
&lt;li&gt;Optimization algorithm that is iterative in nature and converges to acceptable solution regardless of the parameters initialization such as gradient descent applied to logistic regression.&lt;/li&gt;
&lt;li&gt;Optimization algorithm that is iterative in nature and applied to a set of problems that have non-convex cost functions such as neural networks. Therefore, parameters&#39; initialization plays a critical role in speeding up convergence and achieving lower error rates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Gradient Descent&lt;/strong&gt; is the most common optimization algorithm in &lt;em&gt;machine learning&lt;/em&gt; and &lt;em&gt;deep learning&lt;/em&gt;. It is a first-order optimization algorithm. This means it only takes into account the first derivative when performing the updates on the parameters. On each iteration, we update the parameters in the opposite direction of the gradient of the objective function &lt;em&gt;J(w)&lt;/em&gt; w.r.t the parameters where the gradient gives the direction of the steepest ascent. The size of the step we take on each iteration to reach the local minimum is determined by the learning rate Î±. Therefore, we follow the direction of the slope downhill until we reach a local minimum.&lt;/p&gt;

&lt;p&gt;In this post, we&#39;ll cover gradient descent algorithm and its variants: &lt;em&gt;Batch Gradient Descent, Mini-batch Gradient Descent, and Stochastic Gradient Descent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&#39;s first see how gradient descent and its associated steps works on logistic regression before going into the details of its variants. For the sake of simplicity, let&#39;s assume that the logistic regression model has only two parameters: weight &lt;em&gt;w&lt;/em&gt; and bias &lt;em&gt;b&lt;/em&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initialize weight &lt;em&gt;w&lt;/em&gt; and bias &lt;em&gt;b&lt;/em&gt; to any random numbers.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pick a value for the learning rate Î±. The learning rate determines how big the step would be on each iteration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If Î± is very small, it would take long time to converge and become computationally expensive.&lt;/li&gt;
&lt;li&gt;IF Î± is large, it may fail to converge and overshoot the minimum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, plot the cost function against different values of Î± and pick the value of Î± that is right before the first value that didn&#39;t converge so that we would have a very fast learning algorithm that converges (see figure 1).
   


  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/learning_rate.PNG&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/learning_rate.PNG&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Gradient descent with different learning rates.&lt;/h4&gt;
  &lt;p&gt;
    
    &lt;a href=&#34;http://cs231n.github.io/neural-networks-3/&#34;&gt; 
    Source
    &lt;/a&gt; 
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most commonly used rates are : &lt;em&gt;0.001, 0.003, 0.01, 0.03, 0.1, 0.3&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure to scale the data if it&#39;s on very different scales. If we don&#39;t scale the data, the level curves (contours) would be narrower and taller which means it would take longer time to converge (see figure 2).



  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/normalized-vs-unnormalized.PNG&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/normalized-vs-unnormalized.PNG&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Gradient descent: normalized versus unnormalized level curves.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Scale the data to have Î¼ = 0 and Ï = 1. Below is the formula for scaling each example:
&lt;span  class=&#34;math&#34;&gt;\(\frac {x_i - \mu}{\sigma}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On each iteration, take the partial derivative of the cost function &lt;em&gt;J(w)&lt;/em&gt; w.r.t each parameter (gradient):&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{\partial}{\partial w}J(w, b) = \nabla_wJ\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{\partial}{\partial b}J(w, b) = \nabla_bJ\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The update equations are:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[w = w - \alpha \nabla_w J\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[b = b - \alpha \nabla_b J\]&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the sake of illustration, letâs assume we donât have bias. If the slope of the current value of &lt;em&gt;w &amp;gt; 0&lt;/em&gt;, this means that we are to the right of optimal &lt;em&gt;w&lt;/em&gt;*. Therefore, the update will be negative, and will start getting close to the optimal values of &lt;em&gt;w&lt;/em&gt;*. However, if itâs negative, the update will be positive and will increase the current values of &lt;em&gt;w&lt;/em&gt; to converge to the optimal values of &lt;em&gt;w&lt;/em&gt;*(see figure 3):



  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/gradients.PNG&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/gradients.PNG&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Gradient descent. An illustration of how gradient descent algorithm uses the first derivative of the loss function to follow downhill it&amp;rsquo;s minimum.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;Continue the process until the cost function converges. That is, until the error curve becomes flat and doesn&#39;t change.&lt;/li&gt;
&lt;li&gt;In addition, on each iteration, the step would be in the direction that gives the &lt;em&gt;maximum&lt;/em&gt; change since it&#39;s perpendicular to level curves at each step.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let&#39;s discuss the three variants of gradient descent algorithm. The main difference between them is the amount of data we use when computing the gradients for each learning step. The trade-off between them is the accuracy of the gradient versus the time complexity to perform each parameter&#39;s update (learning step).&lt;/p&gt;

&lt;h3 style=&#34;font-family: Georgia; font-size:1.5em;color:purple; font-style:bold&#34;&gt;
Batch Gradient Descent
&lt;/h3&gt;

&lt;p&gt;Batch Gradient Descent is when we sum up over all examples on each iteration when performing the updates to the parameters. Therefore, for each update, we have to sum over all examples:
&lt;span  class=&#34;math&#34;&gt;\(w = w - \alpha \nabla_w J\)&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(num_epochs):
  grad = compute_gradient(data, params)
  params = params - learning_rate * grad
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can use fixed learning rate during training without worrying about learning rate decay.&lt;/li&gt;
&lt;li&gt;It has straight trajectory towards the minimum and it is guaranteed to converge in theory to the global minimum if the loss function is convex and to a local minimum if the loss function is not convex.&lt;/li&gt;
&lt;li&gt;It has unbiased estimate of gradients. The more the examples, the lower the standard error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even though we can use vectorized implementation, it may still be slow to go over all examples especially when we have large datasets.&lt;/li&gt;
&lt;li&gt;Each step of learning happens after going over all examples where some examples may be redundant and don&#39;t contribute much to the update.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style=&#34;font-family: Georgia; font-size:1.5em;color:purple; font-style:bold&#34;&gt;
Mini-Batch Gradient Descent
&lt;/h3&gt;

&lt;p&gt;Instead of going over all examples, Mini-batch Gradient Descent sums up over lower number of examples based on batch size. Therefore, learning happens on each mini-batch of &lt;em&gt;b&lt;/em&gt; examples:
&lt;span  class=&#34;math&#34;&gt;\(w = w - \alpha \nabla_w J(x^{\{i:i + b\}}, y^{\{i: i + b\}}; w, b)\)&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shuffle the training dataset to avoid pre-existing order of examples.&lt;/li&gt;
&lt;li&gt;Partition the training dataset into &lt;em&gt;b&lt;/em&gt; mini-batches based on the batch size. If the training set size is not divisible by batch size, the remaining will be its own batch.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(num_epochs):
    np.random.shuffle(data)
    for batch in radom_minibatches(data, batch_size=32):
        grad = compute_gradient(batch, params)
        params = params - learning_rate * grad
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The batch size is something we can tune. It is usually chosen as power of 2 such as 32, 64, 128, 256, 512, etc. The reason behind it is because some hardware such as GPUs achieve better runtime with common batch sizes such as power of 2.&lt;/p&gt;

&lt;p&gt;The main advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faster than Batch version because it goes through a lot less examples than Batch (all examples).&lt;/li&gt;
&lt;li&gt;Randomly selecting examples will help avoid redundant examples or examples that are very similar that don&#39;t contribute much to the learning.&lt;/li&gt;
&lt;li&gt;With batch size &amp;lt; size of training set, it adds noise to the learning process that helps improving generalization error.&lt;/li&gt;
&lt;li&gt;Even though with more examples the estimate would have lower standard error, the return is less than linear compared to the computational burden we incur.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It won&#39;t converge. On each iteration, the learning step may go back and forth due to the noise. Therefore, it wanders around the minimum region but never converges.&lt;/li&gt;
&lt;li&gt;Due to the noise, the learning steps have more oscillations (see figure 4) and requires adding learning-decay to decrease the learning rate as we become closer to the minimum.



  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/batch-vs-minibatch.PNG&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/batch-vs-minibatch.PNG&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Gradient descent: batch versus mini-batch loss function.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

With large training datasets, we don&#39;t usually need more than 2-10 passes over all training examples (epochs). Note: with batch size &lt;em&gt;b = m&lt;/em&gt;, we get the Batch Gradient Descent.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style=&#34;font-family: Georgia; font-size:1.5em;color:purple; font-style:bold&#34;&gt;
Stochastic Gradient Descent
&lt;/h3&gt;

&lt;p&gt;Instead of going through all examples, Stochastic Gradient Descent (SGD) performs the parameters update on each example $(x^i, y^i)$. Therefore, learning happens on every example:
&lt;span  class=&#34;math&#34;&gt;\(w = w - \alpha \nabla_w J(x^i, y^i; w, b)\)&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shuffle the training dataset to avoid pre-existing order of examples.&lt;/li&gt;
&lt;li&gt;Partition the training dataset into &lt;em&gt;m&lt;/em&gt; examples.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(num_epochs):
    np.random.shuffle(data)
    for example in data:
        grad = compute_gradient(example, params)
        params = params - learning_rate * grad
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It shares most of the advantages and the disadvantages with mini-batch version. Below are the ones that are specific to SGD:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It adds even more noise to the learning process than mini-batch that helps improving generalization error. However, this would increase the run time.&lt;/li&gt;
&lt;li&gt;We can&#39;t utilize vectorization over 1 example and becomes very slow. Also, the variance becomes large since we only use 1 example for each learning step.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a graph that shows the gradient descent&#39;s variants and their direction towards the minimum:



  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/batch-vs-minibatch-vs-stochastic.PNG&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/batch-vs-minibatch-vs-stochastic.PNG&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Gradient descent variants&amp;rsquo; trajectory towards minimum&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

As the figure above shows, SGD direction is very noisy compared to mini-batch.&lt;/p&gt;

&lt;h2 style=&#34;font-family: Georgia; font-size:2em;color:purple; font-style:bold&#34;&gt;
Challenges
&lt;/h2&gt;

&lt;p&gt;Below are some challenges regarding gradient descent algorithm in general as well as its variants - mainly batch and mini-batch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gradient descent is a first-order optimization algorithm, which means it doesn&#39;t take into account the second derivatives of the cost function. However, the curvature of the function affects the size of each learning step. The gradient measures the steepness of the curve but the second derivative measures the curvature of the curve. Therefore, if:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Second derivative = 0 --&amp;gt; the curvature is linear. Therefore, the step size = the learning rate Î±.&lt;/li&gt;
&lt;li&gt;Second derivative &amp;gt; 0 --&amp;gt; the curvature is going upward. Therefore, the step size &amp;lt; the learning rate Î± and may lead to divergence.&lt;/li&gt;
&lt;li&gt;Second derivative &amp;lt; 0 --&amp;gt; the curvature is going downward. Therefore, the step size &amp;gt; the learning rate Î±.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a result, the direction that looks promising to the gradient may not be so and may lead to slow the learning process or even diverge.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If Hessian matrix has poor conditioning number, i.e. the direction of the most curvature has much more curvature than the direction of the lowest curvature. This will lead the cost function to be very sensitive in some directions and insensitive in other directions. As a result, it will make it harder on the gradient because the direction that looks promising for the gradient may not lead to big changes in the cost function (see figure 6).



  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/curvature.PNG&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/curvature.PNG&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Gradient descent fails to exploit the curvature information contained in the Hessian matrix.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The norm of the gradient $g^Tg$ is supposed to decrease slowly with each learning step because the curve is getting flatter and steepness of the curve will decrease. However, we see that the norm of the gradient is increasing, because of the curvature of the curve. Nonetheless, even though the gradients&#39; norm is increasing, we&#39;re able to achieve a very low error rates  (see figure 7).



  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/gradient_norm.PNG&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/gradient_norm.PNG&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Gradient norm.&lt;/h4&gt;
  &lt;p&gt;
    
    &lt;a href=&#34;http://www.deeplearningbook.org/contents/numerical.html&#34;&gt; 
    Source
    &lt;/a&gt; 
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In small dimensions, local minimum is common; however, in large dimensions, saddle points are more common. Saddle point is when the function curves up in some directions and curves down in other directions. In other words, saddle point looks a minimum from one direction and a maximum from other direction (see figure 8). This happens when at least one eigenvalue of the hessian matrix is negative and the rest of eigenvalues are positive.



  




&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/saddle.PNG&#34; &gt;

&lt;img src=&#34;https://imaddabbura.github.io/img/gradient-descent-algorithms/saddle.PNG&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
  &lt;h4&gt;Saddle point.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As discussed previously, choosing a proper learning rate is hard. Also, for mini-batch gradient descent, we have to adjust the learning rate during the training process to make sure it converges to the local minimum and not wander around it. Figuring out the decay rate of the learning rate is also hard and changes with different datasets.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;All parameter updates have the same learning rate; however, we may want to perform larger updates to some parameters that have their directional derivatives more inline with the trajectory towards the minimum than other parameters.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
